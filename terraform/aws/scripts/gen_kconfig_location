#!/usr/bin/env python3
# ex: set filetype=python:

"""
Retrieve region and availability zone information from AWS. Use
it to construct the "locations" Kconfig menu.
"""

import sys
import argparse

from concurrent.futures import ThreadPoolExecutor, as_completed
from botocore.exceptions import ClientError, NoCredentialsError

from aws_common import (
    get_default_region,
    get_all_regions,
    get_region_availability_zones,
    get_jinja2_environment,
    get_region_kconfig_name,
    create_ec2_client,
    handle_aws_client_error,
    handle_aws_credentials_error,
)


def get_region_info(regions, region_name, quiet=False):
    """
    Get detailed information about a specific region including availability zones.

    Args:
        regions (list): List of all available regions
        region_name (str): AWS region name (e.g., 'us-east-1', 'eu-west-1')
        quiet (bool): Suppress debug messages

    Returns:
        dict: Dictionary containing region information and availability zones
    """
    if not quiet:
        print(f"Querying information for region {region_name}...", file=sys.stderr)

    region_info = next(filter(lambda x: x["region_name"] == region_name, regions), None)
    if not region_info:
        if not quiet:
            print(f"Region {region_name} was not found", file=sys.stderr)
        return None
    if region_info["opt_in_status"] == "not-opted-in":
        if not quiet:
            print(f"Region {region_name} is not accessible.", file=sys.stderr)
        return None

    availability_zones = get_region_availability_zones(region_name, quiet)
    if availability_zones is None:
        return None

    result = {
        "region_name": region_info["region_name"],
        "endpoint": region_info.get("end_point", f"ec2.{region_name}.amazonaws.com"),
        "opt_in_status": region_info.get("opt_in_status", "opt-in-not-required"),
        "availability_zone_count": len(availability_zones),
        "availability_zones": availability_zones,
    }

    return result


def output_region_kconfig(region_info):
    """Output region information in Kconfig format."""
    environment = get_jinja2_environment()
    template = environment.get_template("zone.j2")
    print(
        template.render(
            region_name=get_region_kconfig_name(region_info["region_name"]),
            zones=region_info["availability_zones"],
        )
    )


def output_region_raw(region_info, quiet=False):
    """Output region information in table format."""
    if not quiet:
        print(f"Region:             {region_info['region_name']}")
        print(f"Endpoint:           {region_info['endpoint']}")
        print(f"Opt-in status:      {region_info['opt_in_status']}")
        print(f"Availability Zones: {region_info['availability_zone_count']}")

    print(
        f"{'Zone Name':<15} {'Zone ID':<15} {'Zone Type':<18} {'State':<12} {'Parent Zone':<15}"
    )
    print("-" * 80)

    for zone in region_info["availability_zones"]:
        parent_zone = zone.get("parent_zone_name", "") or zone.get("parent_zone_id", "")
        zone_type = zone.get("zone_type", "availability_zone")
        print(
            f"{zone['zone_name']:<15} "
            f"{zone['zone_id']:<15} "
            f"{zone_type:<18} "
            f"{zone['state']:<12} "
            f"{parent_zone:<15}"
        )


def output_regions_kconfig(regions):
    """Output available regions in kconfig format."""
    environment = get_jinja2_environment()
    template = environment.get_template("regions.j2")
    print(
        template.render(
            default_region=get_region_kconfig_name(get_default_region()),
            regions=regions,
        )
    )


def output_regions_raw(regions, quiet=False):
    """Output available regions in table format."""
    if not quiet:
        print(f"Available AWS regions ({len(regions)}):\n")
        print(f"{'Region Name':<20} {'Opt-in Status':<20}")
        print("-" * 42)

    for region in regions:
        opt_in_status = region.get("opt_in_status", "Unknown")
        print(f"{region['region_name']:<20} {opt_in_status:<20}")


def output_locations_kconfig(regions):
    """Output the locations menu in Kconfg format."""
    environment = get_jinja2_environment()
    template = environment.get_template("regions.j2")
    print(
        template.render(
            default_region=get_region_kconfig_name(get_default_region()),
            regions=regions,
        )
    )

    template = environment.get_template("zone.j2")

    # Parallelize availability zone discovery for all regions
    region_infos = {}
    with ThreadPoolExecutor(max_workers=20) as executor:
        # Submit all tasks
        future_to_region = {
            executor.submit(
                get_region_info, regions, region["region_name"], True
            ): region["region_name"]
            for region in regions
        }

        # Collect results as they complete
        for future in as_completed(future_to_region):
            region_name = future_to_region[future]
            try:
                region_info = future.result()
                if region_info:
                    region_infos[region_name] = region_info
            except Exception as exc:
                print(
                    f"Error discovering availability zones for {region_name}: {exc}",
                    file=sys.stderr,
                )

    # Print results in original order
    for region in regions:
        region_name = region["region_name"]
        if region_name in region_infos:
            region_info = region_infos[region_name]
            print()
            print(
                template.render(
                    region_name=get_region_kconfig_name(region_info["region_name"]),
                    zones=region_info["availability_zones"],
                )
            )


def parse_arguments():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(
        description="Get AWS region and availability zone information",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python %(prog)s --regions
  python %(prog)s us-east-1
  python %(prog)s ap-southeast-1 --quiet
        """,
    )
    parser.add_argument(
        "region_name",
        nargs="?",
        help="AWS region name (e.g., us-east-1, eu-west-1, ap-southeast-1)",
    )

    parser.add_argument(
        "--format",
        "-f",
        choices=["raw", "kconfig"],
        default="kconfig",
        help="Output format (default: kconfig)",
    )
    parser.add_argument(
        "--quiet", "-q", action="store_true", help="Suppress informational messages"
    )
    parser.add_argument(
        "--regions", action="store_true", help="List all available AWS regions"
    )
    return parser.parse_args()


def main():
    """Main function to run the program."""
    args = parse_arguments()

    if not args.quiet:
        print("Fetching list of all AWS regions...", file=sys.stderr)
    regions = get_all_regions()
    if not regions:
        sys.exit(1)

    if args.regions:
        if args.format == "kconfig":
            output_regions_kconfig(regions)
        else:
            output_regions_raw(regions, args.quiet)
        return

    if args.region_name:
        if not args.quiet:
            print(
                f"Fetching information for region {args.region_name}...",
                file=sys.stderr,
            )

        region_info = get_region_info(regions, args.region_name, args.quiet)
        if region_info:
            if args.format == "kconfig":
                output_region_kconfig(region_info)
            else:
                output_region_raw(region_info, args.quiet)
        else:
            print(
                f"Could not retrieve information for region '{args.region_name}'.",
                file=sys.stderr,
            )
            print(
                "Try running with --regions to see available regions.", file=sys.stderr
            )
            sys.exit(1)
        return

    output_locations_kconfig(regions)


if __name__ == "__main__":
    main()
