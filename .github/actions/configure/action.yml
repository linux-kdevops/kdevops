# SPDX-License-Identifier: GPL-2.0
---
name: Setup kdevops
description: Setup kdevops workspace

inputs:
  ci_workflow:
    required: false
    type: string
    default: 'demo'
  kernel_tree:
    required: false
    type: string
    default: 'linux'
  kernel_ref:
    required: false
    type: string
    default: 'master'
  test_mode:
    required: false
    type: string
    default: 'kdevops-ci'

runs:
  using: "composite"
  steps:
    - name: Configure git
      shell: bash
      run: |
        set -euxo pipefail
        git config --local --add safe.directory '*'
        git config --local user.name "kdevops"
        git config --local user.email "kdevops@lists.linux.dev"

    - name: Make sure our repo kdevops defconfig exists
      id: defconfig
      shell: bash
      run: |
        set -euxo pipefail
        KDEVOPS_DEFCONFIG=${{ inputs.ci_workflow }}

        if [[ ! -f defconfigs/$KDEVOPS_DEFCONFIG ]]; then
          echo "Missing defconfig: defconfigs/$KDEVOPS_DEFCONFIG"
          exit 1
        fi

        ./scripts/github_output.sh \
          KDEVOPS_DEFCONFIG "$KDEVOPS_DEFCONFIG"

    - name: Initialize CI metadata for kdevops-results-archive
      shell: bash
      run: |
        set -euxo pipefail
        echo "${{ inputs.kernel_tree }}" > ci.trigger
        # Get the kdevops commit subject, not kernel commit
        git log -1 --pretty=format:"%s" > ci.subject
        echo "${{ inputs.kernel_ref }}" > ci.ref

        # Start out pessimistic
        echo "unknown" > ci.result
        echo "Nothing to write home about." > ci.commit_extra

    - name: Run kdevops make defconfig-repo
      env:
        KDEVOPS_DEFCONFIG: ${{ steps.defconfig.outputs.KDEVOPS_DEFCONFIG }}
      shell: bash
      run: |
        set -euxo pipefail
        LINUX_TREE="/mirror/${{ inputs.kernel_tree }}.git"
        LINUX_TREE_REF="${{ inputs.kernel_ref }}"

        # Use GitHub run ID for unique host prefix to avoid conflicts
        # between concurrent runs on same server
        if [[ "${{ inputs.test_mode }}" == "kdevops-ci" ]]; then
          KDEVOPS_HOSTS_PREFIX="kci-${{ github.run_id }}-${{ github.run_number }}"
        else
          KDEVOPS_HOSTS_PREFIX="lci-${{ github.run_id }}-${{ github.run_number }}"
        fi

        echo "Going to use defconfig-$KDEVOPS_DEFCONFIG"

        echo "Linux tree:          $LINUX_TREE"
        echo "Linux trigger ref:   $LINUX_TREE_REF"
        echo "Runner ID:           ${{ github.run_id }}"
        echo "kdevops host prefix: $KDEVOPS_HOSTS_PREFIX"
        echo "kdevops defconfig:   defconfig-$KDEVOPS_DEFCONFIG"

        # Customize KMOD_TIMEOUT when required
        KMOD_TIMEOUT_ARG=
        if [[ "$(hostname)" == *smc111* && \
              "$KDEVOPS_DEFCONFIG" == "linux-modules-kpd" ]]; then
          KMOD_TIMEOUT_ARG="KMOD_TIMEOUT=222"
        fi

        KDEVOPS_ARGS="\
        KDEVOPS_HOSTS_PREFIX=$KDEVOPS_HOSTS_PREFIX \
        LINUX_TREE=$LINUX_TREE \
        LINUX_TREE_REF=$LINUX_TREE_REF \
        ${KMOD_TIMEOUT_ARG} \
        defconfig-$KDEVOPS_DEFCONFIG"
        echo "Going to run:"
        echo "make $KDEVOPS_ARGS"

        make $KDEVOPS_ARGS

        # Configure VM size based on CI type
        VM_CONFIG_ARG=
        if [[ "${{ inputs.test_mode }}" == "kdevops-ci" ]]; then
          VM_CONFIG_ARG="defconfigs/configs/vm2g2c.config"
          echo "Using kdevops CI configuration (2GB/2core VMs)"
        else
          echo "Using Linux CI configuration (4GB/8core VMs)"
        fi

        ./scripts/kconfig/merge_config.sh \
        -n .config \
        defconfigs/configs/diy.config \
        defconfigs/configs/ci.config \
        ${VM_CONFIG_ARG}

    - name: Run kdevops make
      shell: bash
      run: |
        set -euxo pipefail
        make -j$(nproc)
