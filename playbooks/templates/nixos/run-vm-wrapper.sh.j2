#!/bin/bash
# Wrapper script for NixOS VM: {{ vm_name }}
# Generated by kdevops

set -e

# Configuration
VM_NAME="{{ vm_name }}"
VM_DISK="{{ nixos_storage_dir }}/{{ vm_name }}.qcow2"
VM_MEMORY="{{ vm_memory | default(4096) }}"
VM_CPUS="{{ vm_vcpus | default(4) }}"
SSH_PORT="{{ 10022 + vm_index|default(0)|int }}"
MONITOR_PORT="{{ vm_monitor_port | default(55555 + vm_index|default(0)) }}"
VNC_PORT="{{ vm_vnc_port | default(5900 + vm_index|default(0)) }}"

# Network configuration for SSH access
# Using user mode networking with port forwarding
NETWORK_OPTS="hostfwd=tcp::${SSH_PORT}-:22"
{% if nixos_enable_port_forwards is defined and nixos_enable_port_forwards %}
{% for port in nixos_port_forwards | default([]) %}
NETWORK_OPTS="${NETWORK_OPTS},hostfwd=tcp::{{ port.host }}-:{{ port.guest }}"
{% endfor %}
{% endif %}

# Shared directories
{% if nixos_shared_dirs is defined %}
SHARED_DIRS=""
{% for dir in nixos_shared_dirs %}
SHARED_DIRS="${SHARED_DIRS} -virtfs local,path={{ dir.source }},security_model=none,mount_tag={{ dir.tag }}"
{% endfor %}
{% endif %}

# Function to start the VM
start_vm() {
    if [ -f "/tmp/${VM_NAME}.pid" ] && kill -0 $(cat /tmp/${VM_NAME}.pid) 2>/dev/null; then
        echo "VM ${VM_NAME} is already running (PID: $(cat /tmp/${VM_NAME}.pid))"
        return 1
    fi

    echo "Starting NixOS VM: ${VM_NAME}"
    echo "  Disk: ${VM_DISK}"
    echo "  Memory: ${VM_MEMORY}MB"
    echo "  CPUs: ${VM_CPUS}"
    echo "  SSH: localhost:${SSH_PORT}"
    echo "  Monitor: 127.0.0.1:${MONITOR_PORT}"
    echo "  VNC: :$((VNC_PORT - 5900))"

    # Check if disk exists
    if [ ! -f "${VM_DISK}" ]; then
        echo "Error: VM disk image not found: ${VM_DISK}"
        echo "Please run 'make bringup' to build the NixOS disk image first"
        return 1
    fi

    # Check disk image size
    DISK_SIZE=$(stat -c%s "${VM_DISK}" 2>/dev/null || stat -f%z "${VM_DISK}" 2>/dev/null || echo 0)
    if [ "$DISK_SIZE" -lt 1048576 ]; then
        echo "Warning: Disk image appears too small (${DISK_SIZE} bytes)"
        echo "The image may not contain a proper NixOS installation"
    fi

    # Create extra storage drives if they don't exist
    EXTRA_DRIVES_DIR="{{ nixos_storage_dir }}/extra-drives"
    mkdir -p "${EXTRA_DRIVES_DIR}"

    # Create 4 extra sparse drives for fstests (100GB each)
    for i in {0..3}; do
        EXTRA_DRIVE="${EXTRA_DRIVES_DIR}/${VM_NAME}-extra${i}.qcow2"
        if [ ! -f "${EXTRA_DRIVE}" ]; then
            echo "Creating extra drive ${i}: ${EXTRA_DRIVE}"
            qemu-img create -f qcow2 "${EXTRA_DRIVE}" 100G
        fi
    done

    # Start QEMU with the NixOS disk image
    echo "Starting QEMU with NixOS disk image..."
    qemu-system-x86_64 \
        -name "${VM_NAME}" \
        -m "${VM_MEMORY}" \
        -smp "${VM_CPUS}" \
        -enable-kvm \
        -machine pc,accel=kvm \
        -cpu host \
        -drive file="${VM_DISK}",if=virtio,format=qcow2 \
        -drive file="${EXTRA_DRIVES_DIR}/${VM_NAME}-extra0.qcow2",format=qcow2,if=none,id=drv0 \
        -device virtio-blk-pci,drive=drv0,serial=kdevops0 \
        -drive file="${EXTRA_DRIVES_DIR}/${VM_NAME}-extra1.qcow2",format=qcow2,if=none,id=drv1 \
        -device virtio-blk-pci,drive=drv1,serial=kdevops1 \
        -drive file="${EXTRA_DRIVES_DIR}/${VM_NAME}-extra2.qcow2",format=qcow2,if=none,id=drv2 \
        -device virtio-blk-pci,drive=drv2,serial=kdevops2 \
        -drive file="${EXTRA_DRIVES_DIR}/${VM_NAME}-extra3.qcow2",format=qcow2,if=none,id=drv3 \
        -device virtio-blk-pci,drive=drv3,serial=kdevops3 \
        -netdev user,id=net0,${NETWORK_OPTS} \
        -device virtio-net-pci,netdev=net0 \
        -monitor tcp:127.0.0.1:${MONITOR_PORT},server,nowait \
        -vnc :$((VNC_PORT - 5900)) \
        -daemonize \
        -pidfile "/tmp/${VM_NAME}.pid" \
        ${SHARED_DIRS:-}

    echo "VM ${VM_NAME} started successfully"
}

# Function to stop the VM
stop_vm() {
    if [ -f "/tmp/${VM_NAME}.pid" ]; then
        PID=$(cat /tmp/${VM_NAME}.pid)
        if kill -0 $PID 2>/dev/null; then
            echo "Stopping VM ${VM_NAME} (PID: $PID)"
            kill $PID
            rm -f /tmp/${VM_NAME}.pid
        else
            echo "VM ${VM_NAME} is not running"
            rm -f /tmp/${VM_NAME}.pid
        fi
    else
        echo "VM ${VM_NAME} is not running (no PID file)"
    fi
}

# Function to check VM status
status_vm() {
    if [ -f "/tmp/${VM_NAME}.pid" ]; then
        PID=$(cat /tmp/${VM_NAME}.pid)
        if kill -0 $PID 2>/dev/null; then
            echo "VM ${VM_NAME} is running (PID: $PID)"
            return 0
        else
            echo "VM ${VM_NAME} is not running (stale PID file)"
            rm -f /tmp/${VM_NAME}.pid
            return 1
        fi
    else
        echo "VM ${VM_NAME} is not running"
        return 1
    fi
}

# Main script logic
case "${1:-start}" in
    start)
        start_vm
        ;;
    stop)
        stop_vm
        ;;
    status)
        status_vm
        ;;
    restart)
        stop_vm
        sleep 2
        start_vm
        ;;
    *)
        echo "Usage: $0 {start|stop|status|restart}"
        exit 1
        ;;
esac
