#!/usr/bin/python3
# SPDX-License-Identifier: GPL-2.0

# Merge all xunit files into one.
#
# Given a directory path it finds all xunit files and merges them
# to the provided output file you specify.

import argparse
import os
import sys
from junitparser import JUnitXml, TestSuite


def get_test_suite(filename):
    try:
        ts = JUnitXml.fromfile(filename)
    except IOError as e:
        sys.exit("Couldn't open %s: %s" % (filename, e[1]))

    if type(ts) != TestSuite:
        sys.exit("%s is not a xUnit report file" % filename)
    return ts


def merge_ts(old_ts, new_ts):
    for tc in new_ts:
        old_ts.add_testcase(tc)
    old_ts.update_statistics()
    return old_ts


def main():
    parser = argparse.ArgumentParser(description="Merge all xunit files into one")
    parser.add_argument(
        "results",
        metavar="<directory with results>",
        type=str,
        help="directory with results file",
    )
    parser.add_argument(
        "outputfile",
        metavar="<output file>",
        type=str,
        help="The file to generate output to",
    )
    args = parser.parse_args()

    all_xunit_ts = None

    num = 0

    for root, dirs, all_files in os.walk(args.results):
        for fname in all_files:
            f = os.path.join(root, fname)
            if os.path.isdir(f):
                continue
            if not os.path.isfile(f):
                continue
            if not f.endswith(".xml"):
                continue

            sys.stdout.write("Processing %s ...\n" % f)

            if not all_xunit_ts:
                all_xunit_ts = get_test_suite(f)
                continue
            new_ts = get_test_suite(f)
            merge_ts(all_xunit_ts, new_ts)
            num = num + 1

    if all_xunit_ts:
        all_xunit_ts.write(args.outputfile)
        sys.stdout.write(
            "%s generated by merging all the above %d xunit files successfully\n"
            % (args.outputfile, num)
        )


if __name__ == "__main__":
    main()
