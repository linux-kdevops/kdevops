---
- name: Check Lambda Labs API key configuration (if using Lambda Labs)
  ansible.builtin.command:
    cmd: "python3 {{ topdir_path }}/scripts/lambdalabs_credentials.py check"
  register: api_key_check
  failed_when: false
  changed_when: false
  when:
    - kdevops_terraform_provider == "lambdalabs"
  tags:
    - bringup
    - destroy
    - status

- name: Report Lambda Labs API key configuration status
  ansible.builtin.fail:
    msg: |
      ERROR: Lambda Labs API key is not configured!

      To fix this, configure your Lambda Labs API key using one of these methods:

      Use the kdevops credentials management tool:
        python3 scripts/lambdalabs_credentials.py set 'your-actual-api-key-here'

      Or manually create the credentials file:
        mkdir -p ~/.lambdalabs
        echo "[default]" > ~/.lambdalabs/credentials
        echo "lambdalabs_api_key=your-actual-api-key-here" >> ~/.lambdalabs/credentials
        chmod 600 ~/.lambdalabs/credentials

      Get your API key from: https://cloud.lambdalabs.com
  when:
    - kdevops_terraform_provider == "lambdalabs"
    - api_key_check.rc != 0
  tags:
    - bringup
    - destroy
    - status

- name: Display Lambda Labs API key configuration status
  ansible.builtin.debug:
    msg: "{{ api_key_check.stdout }}"
  when:
    - kdevops_terraform_provider == "lambdalabs"
    - api_key_check.rc == 0
  tags:
    - bringup
    - destroy
    - status

- name: Check Lambda Labs capacity before provisioning (if using Lambda Labs)
  ansible.builtin.shell:
    cmd: |
      {{ topdir_path }}/scripts/lambda-cli --output json check-availability \
        {{ terraform_lambdalabs_instance_type }} {{ terraform_lambdalabs_region }} | \
      python3 -c "
      import sys, json
      data = json.load(sys.stdin)
      if data.get('available'):
          print(data.get('message', 'Instance available'))
          sys.exit(0)
      else:
          print(data.get('error', 'Instance not available'))
          if 'available_regions' in data:
              print(f'  Available in: ' + ', '.join(data['available_regions']))
          sys.exit(1)
      "
  register: capacity_check
  failed_when: false
  changed_when: false
  when:
    - kdevops_terraform_provider == "lambdalabs"
  tags:
    - bringup

- name: Report Lambda Labs capacity check result
  ansible.builtin.fail:
    msg: "{{ capacity_check.stdout }}"
  when:
    - kdevops_terraform_provider == "lambdalabs"
    - capacity_check.rc != 0
  tags:
    - bringup

# No longer needed - terraform reads directly from credentials file

- name: Bring up terraform resources
  cloud.terraform.terraform:
    force_init: true
    project_path: "{{ topdir_path }}/terraform/{{ kdevops_terraform_provider }}"
    state: present
  tags:
    - bringup

- name: Retrieve the controller_ip_map from terraform
  cloud.terraform.terraform_output:
    format: json
    name: controller_ip_map
    project_path: "{{ topdir_path }}/terraform/{{ kdevops_terraform_provider }}"
  register: terraform_output
  tags:
    - ssh

- name: Add each target node's ssh Host entry on the control host
  ansible.builtin.blockinfile:
    block: "{{ lookup('template', 'ssh_config.j2') }}"
    create: true
    dest: "{{ kdevops_ssh_config }}"
    insertafter: "EOF"
    marker: "# {mark} host configuration for {{ item.key }}"
    mode: "u=rw,g=r,o=r"
  loop: "{{ terraform_output.value | dict2items }}"
  tags:
    - ssh

- name: Ensure the Include directive is present on the controller
  ansible.builtin.blockinfile:
    path: "{{ sshconfig }}"
    insertbefore: BOF
    append_newline: true
    marker: "# {mark} Managed by kdevops"
    mode: "u=rw,g=r,o=r"
    block: "Include {{ kdevops_ssh_config_prefix }}*"
  tags:
    - ssh

- name: Report terraform status
  tags:
    - status
  block:
    - name: Retrieve the controller_ip_map from terraform
      cloud.terraform.terraform_output:
        format: json
        name: controller_ip_map
        project_path: "{{ topdir_path }}/terraform/{{ kdevops_terraform_provider }}"
      register: terraform_output

    - name: End play -- terraform state file is empty or missing
      ansible.builtin.meta: end_play
      when:
        - terraform_output.warnings is defined

    - name: Count active resources
      ansible.builtin.command:
        cmd: "terraform state list"
        chdir: "{{ topdir_path }}/terraform/{{ kdevops_terraform_provider }}"
      register: terraform_state
      changed_when: false

    - name: Show status
      ansible.builtin.debug:
        msg: "Active resources: {{ terraform_state.stdout_lines | length }}"

    - name: Show controller IP map
      ansible.builtin.debug:
        var: terraform_output.value

- name: Remove the ephemeral ssh config file on the control host
  ansible.builtin.file:
    path: "{{ kdevops_ssh_config }}"
    state: absent
  tags:
    - destroy

- name: Destroy terraform resources
  cloud.terraform.terraform:
    force_init: true
    project_path: "{{ topdir_path }}/terraform/{{ kdevops_terraform_provider }}"
    state: absent
  tags:
    - destroy
