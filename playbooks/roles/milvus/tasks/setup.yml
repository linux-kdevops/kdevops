---
- name: Check if Python packages are installed
  command: dpkg -l python3-numpy python3-pandas python3-tqdm
  register: python_packages_check
  changed_when: false
  failed_when: false

- name: Install Python packages via apt
  package:
    name:
      - python3-numpy
      - python3-pandas
      - python3-tqdm
    state: present
  become: yes
  when: python_packages_check.rc != 0

- name: Check if pymilvus is installed
  command: python3 -c "import pymilvus; print(pymilvus.__version__)"
  register: pymilvus_check
  changed_when: false
  failed_when: false

- name: Install Python Milvus client with pip
  pip:
    name:
      - pymilvus>={{ ai_vector_db_milvus_version }}
    state: present
    extra_args: --break-system-packages
  become: yes
  when: pymilvus_check.rc != 0 or pymilvus_check.stdout is version(ai_vector_db_milvus_version, '<')

- name: Check Docker Compose services status
  shell: |
    cd {{ ai_vector_db_milvus_config_dir }}
    docker-compose ps --format json
  when: ai_vector_db_milvus_docker|bool
  become: yes
  register: docker_status_check
  changed_when: false
  failed_when: false

- name: Start Milvus with Docker Compose
  shell: |
    cd {{ ai_vector_db_milvus_config_dir }}
    docker-compose up -d
  when: docker_status_check.rc != 0 or "running" not in docker_status_check.stdout
  become: yes
  register: docker_compose_result
  changed_when: "'Started' in docker_compose_result.stderr or 'Created' in docker_compose_result.stderr"

- name: Wait for Milvus to be ready
  wait_for:
    port: "{{ ai_vector_db_milvus_port }}"
    host: localhost
    delay: 60
    timeout: 300

- name: Create benchmark scripts directory
  file:
    path: "{{ ai_vector_db_milvus_data_dir }}/scripts"
    state: directory
    mode: '0755'
  register: scripts_dir_result

- name: Check if benchmark scripts exist
  stat:
    path: "{{ ai_vector_db_milvus_data_dir }}/scripts/{{ item }}"
  loop:
    - milvus_benchmark.py
    - milvus_utils.py
  register: benchmark_scripts_check

- name: Copy benchmark scripts
  copy:
    src: "{{ item.item }}"
    dest: "{{ ai_vector_db_milvus_data_dir }}/scripts/"
    mode: '0755'
  loop: "{{ benchmark_scripts_check.results }}"
  when: not item.stat.exists or scripts_dir_result is changed

- name: Create initial connection test script
  template:
    src: test_connection.py.j2
    dest: "{{ ai_vector_db_milvus_data_dir }}/scripts/test_connection.py"
    mode: '0755'

- name: Test Milvus connection
  command: python3 {{ ai_vector_db_milvus_data_dir }}/scripts/test_connection.py
  register: connection_test
  changed_when: false

- name: Display connection test result
  debug:
    msg: "{{ connection_test.stdout }}"
