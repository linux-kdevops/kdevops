---
# Install distribution-specific dependencies
- name: Install dependencies
  include_tasks: install-deps/main.yml
  tags: [ 'setup', 'deps' ]

- include_role:
    name: create_data_partition
  tags: [ 'setup', 'data_partition' ]

- include_role:
    name: common
  when:
    - infer_uid_and_group|bool

- name: Ensure data_dir has correct ownership
  tags: [ 'setup' ]
  become: yes
  become_method: sudo
  ansible.builtin.file:
    path: "{{ data_path }}"
    owner: "{{ data_user }}"
    group: "{{ data_group }}"
    state: directory

- name: Clone mmtests repository
  tags: [ 'setup' ]
  ansible.builtin.git:
    repo: "{{ mmtests_git_url }}"
    dest: "{{ mmtests_data_dir }}"
    version: "{{ mmtests_git_version }}"
    force: yes

- name: Check if mmtests fixes directory exists
  tags: [ 'setup' ]
  delegate_to: localhost
  stat:
    path: "{{ topdir_path }}/workflows/mmtests/fixes/"
  register: fixes_dir
  run_once: false

- name: Find mmtests patches in fixes directory
  tags: [ 'setup' ]
  delegate_to: localhost
  find:
    paths: "{{ topdir_path }}/workflows/mmtests/fixes/"
    patterns: "*.patch"
  register: mmtests_patches
  when: fixes_dir.stat.exists
  run_once: false

- name: Copy patches to remote host
  tags: [ 'setup' ]
  become: yes
  become_method: sudo
  copy:
    src: "{{ item.path }}"
    dest: "/tmp/{{ item.path | basename }}"
    mode: '0644'
  with_items: "{{ mmtests_patches.files }}"
  when:
    - fixes_dir.stat.exists
    - mmtests_patches.files | length > 0

- name: Apply mmtests patches on remote host
  tags: [ 'setup' ]
  become: yes
  become_method: sudo
  shell: |
    cd {{ mmtests_data_dir }}
    git am /tmp/{{ item.path | basename }}
  with_items: "{{ mmtests_patches.files }}"
  when:
    - fixes_dir.stat.exists
    - mmtests_patches.files | length > 0
  ignore_errors: true
  register: patch_results

- name: Report patch application results
  tags: [ 'setup' ]
  debug:
    msg: |
      Applied {{ mmtests_patches.files | length | default(0) }} patches from fixes directory:
      {% for patch in mmtests_patches.files | default([]) %}
      - {{ patch.path | basename }}
      {% endfor %}
  when:
    - fixes_dir.stat.exists
    - mmtests_patches.files | length > 0

- name: Generate mmtests configuration
  tags: [ 'setup' ]
  become: yes
  become_method: sudo
  ansible.builtin.template:
    src: "{{ mmtests_test_type }}-config.j2"
    dest: "{{ mmtests_data_dir }}/configs/config-workload-{{ mmtests_test_type }}-kdevops"
    owner: root
    group: root
    mode: '0644'

- name: Fail if configured memory percentages overcommit available memory
  fail:
    msg: >-
      Overcommit configuration: anonymous ({{ mmtests_anonymous_memory_percent }}%) +
      file-backed ({{ mmtests_file_memory_percent }}%) exceeds 100% of available memory.
      Adjust your mmtests_*_percent values in extra_vars.yaml.
  when: (mmtests_anonymous_memory_percent + mmtests_file_memory_percent) > 100

- name: Run mmtests autogen in background
  tags: [ 'setup' ]
  become: true
  become_method: sudo
  ansible.builtin.command: ./bin/autogen-configs
  args:
    chdir: "{{ mmtests_data_dir }}"

- name: Run mmtests autogen in background
  tags: [ 'setup' ]
  become: true
  become_method: sudo
  ansible.builtin.command: ./bin/autogen-configs
  args:
    chdir: "{{ mmtests_data_dir }}"

- name: Get kernel version
  tags: [ 'setup', 'run_tests' ]
  ansible.builtin.command: uname -r
  register: kernel_version

- name: Show kernel version
  tags: [ 'setup', 'run_tests' ]
  debug:
    msg: "Kernel version on {{ inventory_hostname }} : {{ kernel_version.stdout }}"

- name: Build mmtests
  tags: [ 'setup' ]
  become: true
  become_method: sudo
  ansible.builtin.shell: >
    yes yes | ./run-mmtests.sh -b
    --config configs/config-workload-{{ mmtests_test_type }}-kdevops
    {{ inventory_hostname }}-{{ kernel_version.stdout }}
  args:
    chdir: "{{ mmtests_data_dir }}"
  register: mmtests_build_result

- name: Fail if mmtests build failed
  fail:
    msg: >
      mmtests build failed on {{ inventory_hostname }}.
      Exit code: {{ mmtests_build_result.rc }}
      Stdout: {{ mmtests_build_result.stdout }}
      Stderr: {{ mmtests_build_result.stderr }}
  when: mmtests_build_result.rc != 0
  tags: [ 'setup' ]

- name: Check if {{ mmtests_device }} is mounted
  tags: [ 'run_tests' ]
  become: yes
  become_method: sudo
  command: findmnt --noheadings --output TARGET --source {{ mmtests_device }}
  register: mountpoint_stat
  failed_when: false
  changed_when: false
  when: mmtests_requires_mkfs_device | bool

- name: Unmount {{ mmtests_device }} if mounted
  tags: [ 'run_tests' ]
  become: yes
  become_method: sudo
  command: umount {{ mmtests_device }}
  when:
    - mmtests_requires_mkfs_device | bool
    - mountpoint_stat.stdout != ""

# XXX: add variability for the different options for the governor
- name: Set CPU governor to performance
  tags: [ 'run_tests' ]
  become: yes
  become_method: sudo
  ansible.builtin.shell: |
    for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do
      if [ -f "$cpu" ]; then
        echo "performance" > "$cpu"
      fi
    done

- name: Drop caches before test
  tags: [ 'run_tests' ]
  become: yes
  become_method: sudo
  ansible.builtin.shell: |
    sync
    echo 3 > /proc/sys/vm/drop_caches
  when: mmtests_pretest_dropvmcaches | bool

- name: Configure THP
  tags: [ 'run_tests' ]
  become: yes
  become_method: sudo
  ansible.builtin.shell: |
    echo "{{ mmtests_pretest_thp_setting }}" > /sys/kernel/mm/transparent_hugepage/enabled

- name: Manually trigger memory compaction before run
  tags: [ 'run_tests' ]
  become: yes
  become_method: sudo
  ansible.builtin.shell: |
    echo 1 > /proc/sys/vm/compact_memory
  when:
    - mmtests_pretest_compaction | bool
  ignore_errors: true

- name: Show kernel version
  tags: [ 'run_tests' ]
  debug:
    msg: "Kernel version on {{ inventory_hostname }} : {{ kernel_version.stdout }}"

- name: Run mmtests in background
  tags: [ 'run_tests' ]
  become: true
  become_method: sudo
  ansible.builtin.command: ./run-mmtests.sh --config configs/config-workload-{{ mmtests_test_type }}-kdevops {{ inventory_hostname }}-{{ kernel_version.stdout }}
  args:
    chdir: "{{ mmtests_data_dir }}"
  async: 86400 # 24 hours
  poll: 0
  register: mmtests_job

- name: Wait for mmtests to complete
  tags: [ 'run_tests' ]
  become: true
  become_method: sudo
  ansible.builtin.async_status:
    jid: "{{ mmtests_job.ansible_job_id }}"
  register: mmtests_status
  until: mmtests_status.finished
  retries: 1440    # 12 hours
  delay: 60        # check every 60 seconds

- name: Create local results directory
  delegate_to: localhost
  ansible.builtin.file:
    path: "{{ topdir_path }}/workflows/mmtests/results/{{ inventory_hostname }}/"
    state: directory
    mode: '0755'
  run_once: false
  tags: ['results']

- name: Ensure old mmtests results archive is removed if it exists
  become: yes
  become_method: sudo
  ansible.builtin.file:
    path: "{{ mmtests_results_dir_basename }}/mmtests-results-{{ inventory_hostname }}.tar.gz"
    state: absent
  tags: [ 'results' ]

- name: Archive mmtests results directory on remote host
  become: yes
  become_method: sudo
  command: >
    tar czf {{ mmtests_results_dir_basename }}/mmtests-results-{{ inventory_hostname }}.tar.gz -C {{ mmtests_results_dir }} .
  args:
    creates: "{{ mmtests_results_dir_basename }}/mmtests-results-{{ inventory_hostname }}.tar.gz"
  tags: [ 'results' ]

- name: Remove previously fetched mmtests results archive if it exists
  become: no
  delegate_to: localhost
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  tags: [ 'results' ]
  with_items:
    - "{{ topdir_path }}/workflows/mmtests/results/{{ inventory_hostname }}/mmtests-results-{{ inventory_hostname }}.tar.gz"
    - "{{ topdir_path }}/workflows/mmtests/results/{{ inventory_hostname }}/mmtests-results-{{ inventory_hostname }}"

- name: Copy mmtests results
  tags: [ 'results' ]
  become: yes
  become_method: sudo
  ansible.builtin.fetch:
    src: "{{ mmtests_results_dir_basename }}/mmtests-results-{{ inventory_hostname }}.tar.gz"
    dest: "{{ topdir_path }}/workflows/mmtests/results/{{ inventory_hostname }}/"
    flat: yes

- name: Ensure local mmtests results extraction directory exists
  become: no
  delegate_to: localhost
  ansible.builtin.file:
    path: "{{ topdir_path }}/workflows/mmtests/results/{{ inventory_hostname }}/mmtests-results-{{ inventory_hostname }}"
    state: directory
    mode: '0755'
    recurse: yes
  tags: [ 'results' ]

- name: Extract mmtests results archive locally
  become: no
  delegate_to: localhost
  ansible.builtin.unarchive:
    src: "{{ topdir_path }}/workflows/mmtests/results/{{ inventory_hostname }}/mmtests-results-{{ inventory_hostname }}.tar.gz"
    dest: "{{ topdir_path }}/workflows/mmtests/results/{{ inventory_hostname }}/mmtests-results-{{ inventory_hostname }}"
    remote_src: no
  tags: [ 'results' ]

- name: Clean previous mmtests results on DUTs
  tags: [ 'clean' ]
  become: yes
  become_method: sudo
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ mmtests_results_dir }}"

- name: Clean previous mmtests results on localhost
  tags: [ 'clean' ]
  become: yes
  become_method: sudo
  delegate_to: localhost
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ topdir_path }}/workflows/mmtests/results/{{ inventory_hostname }}"
