### Automatically generated by kdevops {{ kdevops_version }}
###
### This a benchmark that stresses THP allocations in a specific manner.
###
### THPCOMPACT_ANONSIZE is split based on the number of active threads at
### each stage of the test. The active memory for a thread is referred
### to as THREAD_ANONSIZE
###
### 1. It first creates a large THREAD_ANONSIZE anonymous mapping that is THP
###    aligned, specifies madvise(MADV_HUGEPAGE) and faults it. It then punches
###    holes in the (hopefully) THP mapping that are naturally aligned and
###    half the size of a THP. This mapping is a migration source that frees
###    pageblocks as the pages are moved. At this point, the migration source
###    only has anonymous pages.
###
### 2. It then creates a THREAD_ANONSIZE/2 anonymous mapping that is not yet
###    faulted. The size of this mapping represents the sum of the holes created
###    in step 1.
###
### 3. A file mapping is created of size THREAD_FILE and the file is
###    read-faulted. These are also potential migration sources as some of
###    the holes will be used to store file-backed pages.
###
### 4. Finally the anonymous mapping created at step 2 is faulted while
###    recording the time to fault, the locality and whether a huge page
###    is used.
###
### The overall size of the workload is such that it should fit in memory while
### requiring compaction to allocate THPs for the final mapping.

export MMTESTS="thpcompact"

{% if mmtests_requires_mkfs_device %}
export TESTDISK_PARTITION={{ mmtests_device }}
export TESTDISK_FILESYSTEM={{ mmtests_mkfs_type }}
export TESTDISK_MKFS_PARAM="{{ mmtests_mkfs_cmd }}"

# Sadly there is no generic mkfs way to set sector size yet.
{% if mmtests_fs_xfs %}
export TESTDISK_MKFS_PARAM="$TESTDISK_MKFS_PARAM -s size={{ mmtests_xfs_sector_size }}"
{% elif mmtests_fs_ext4 %}
# ext4 has this odd environment variable thing.
export MKE2FS_DEVICE_SECTSIZE="{{ mmtests_ext4_sector_size }}"
{% endif %}

export TESTDISK_MOUNT_ARGS=
{% endif %}

{% if mmtests_monitor_enable_ftrace %}
# List of monitors
export MONITOR_FTRACE_EVENTS="
	compaction/mm_compaction_begin
	compaction/mm_compaction_defer_compaction
	compaction/mm_compaction_deferred
	compaction/mm_compaction_defer_reset
	compaction/mm_compaction_end
	compaction/mm_compaction_finished
	compaction/mm_compaction_isolate_freepages
	compaction/mm_compaction_isolate_migratepages
	compaction/mm_compaction_kcompactd_sleep
	compaction/mm_compaction_kcompactd_wake
	compaction/mm_compaction_migratepages
	compaction/mm_compaction_suitable
	compaction/mm_compaction_try_to_compact_pages
	compaction/mm_compaction_wakeup_kcompactd
	kmem/mm_page_alloc_extfrag"
{% endif %}

export RUN_MONITOR=yes
export MONITORS_ALWAYS=
export MONITORS_GZIP=""

{% if mmtests_monitor_enable_proc_monitoring %}
export MONITORS_GZIP="$MONITORS_GZIP proc-vmstat proc-buddyinfo proc-pagetypeinfo"
{% endif %}

{% if mmtests_monitor_enable_mpstat %}
export MONITORS_GZIP="$MONITORS_GZIP mpstat"
{% endif %}

export MONITORS_WITH_LATENCY="vmstat"
export MONITOR_UPDATE_FREQUENCY={{ mmtests_monitor_interval }}

export THPCOMPACT_MIN_THREADS={{ mmtests_thpcompact_threads_min }}

{% if mmtests_thpcompact_threads_max_type_auto %}
export THPCOMPACT_MAX_THREADS={{ ansible_facts.processor_vcpus * 4 }}
{% elif mmtests_thpcompact_threads_max_type_manual %}
export THPCOMPACT_MAX_THREADS={{ mmtests_thpcompact_threads_max }}
{% endif %}

export THPCOMPACT_ITERATIONS={{ mmtests_iterations }}

# Memory configuration
export THPCOMPACT_ANONSIZE=$((MEMTOTAL_BYTES * {{ mmtests_thpcompact_anonymous_memory_percent }} / 100))
export THPCOMPACT_FILESIZE=$((THPCOMPACT_ANONSIZE / {{ mmtests_thpcompact_filemap_memory_scale }} ))
export TESTDISK_MIN_SIZE=$((THPCOMPACT_FILESIZE*5/4))

RUN_WARMUP=no

# Workload configuration - match original thpcompact behavior
THPCOMPACT_WORKLOAD="thpcompact"
