### Automatically generated by kdevops {{ kdevops_version }}
###
### THPChallenge is a benchmark that allocates THPs while there is interference
### from a background workload.
###
### The THP test creates a number of threads, each of which faults a region that
### is THPCHALLENGE_THP_WSETSIZE/$NR_THREADS in size. Optionally the mapping
### will use madvise. The time to fault each page, the size allocated and the
### locality is recorded.
###
### The "challenge" load is fio inefficiently creating many small files, the
### total size of which is THPCHALLENGE_FIO_WSETSIZE
export MMTESTS="thpchallenge"

{% if mmtests_requires_mkfs_device %}
export TESTDISK_PARTITION={{ mmtests_device }}
export TESTDISK_FILESYSTEM={{ mmtests_mkfs_type }}
export TESTDISK_MKFS_PARAM="{{ mmtests_mkfs_cmd }}"

# Sadly there is no generic mkfs way to set sector size yet.
{% if mmtests_fs_xfs %}
export TESTDISK_MKFS_PARAM="$TESTDISK_MKFS_PARAM -s size={{ mmtests_xfs_sector_size }}"
{% elif mmtests_fs_ext4 %}
# ext4 has this odd environment variable thing.
export MKE2FS_DEVICE_SECTSIZE="{{ mmtests_ext4_sector_size }}"
{% endif %}

export TESTDISK_MOUNT_ARGS=
{% endif %}

{% if mmtests_monitor_enable_ftrace %}
# List of monitors
export MONITOR_FTRACE_EVENTS="
	compaction/mm_compaction_begin
	compaction/mm_compaction_defer_compaction
	compaction/mm_compaction_deferred
	compaction/mm_compaction_defer_reset
	compaction/mm_compaction_end
	compaction/mm_compaction_finished
	compaction/mm_compaction_isolate_freepages
	compaction/mm_compaction_isolate_migratepages
	compaction/mm_compaction_kcompactd_sleep
	compaction/mm_compaction_kcompactd_wake
	compaction/mm_compaction_migratepages
	compaction/mm_compaction_suitable
	compaction/mm_compaction_try_to_compact_pages
	compaction/mm_compaction_wakeup_kcompactd
	kmem/mm_page_alloc_extfrag"
{% endif %}

{% if mmtests_monitor_enable_proc_monitoring %}
export MONITORS_GZIP="$MONITORS_GZIP proc-vmstat proc-buddyinfo proc-pagetypeinfo"
{% endif %}

{% if mmtests_monitor_enable_mpstat %}
export MONITORS_GZIP="$MONITORS_GZIP mpstat"
{% endif %}

export MONITORS_WITH_LATENCY="vmstat"
export MONITOR_UPDATE_FREQUENCY={{ mmtests_monitor_interval }}

# Limit memory to 16GB per node to save storage and limit runtime
. $SHELLPACK_INCLUDE/include-sizes.sh
get_numa_details
limit_memory $((16*1048576*1024*NUMNODES))

# thpchallenge
export THPCHALLENGE_BACKGROUND="{{ mmtests_thpchallenge_background }}"
export THPCHALLENGE_FIO_THREADS={{ mmtests_thpchallenge_fio_threads }}
export THPCHALLENGE_MIN_THREADS=$((((NUMCPUS/NUMNODES)-THPCHALLENGE_FIO_THREADS)/4))
export THPCHALLENGE_MAX_THREADS=$THPCHALLENGE_MIN_THREADS
if [ $THPCHALLENGE_MAX_THREADS -le 0 ]; then
	die "Insufficient number of CPUs to run benchmark"
fi
export THPCHALLENGE_THP_WSETSIZE=$(( MEMTOTAL_BYTES * {{ mmtests_thpchallenge_thp_wsetsize }} / 100 ))
export THPCHALLENGE_FIO_WSETSIZE=$(( MEMTOTAL_BYTES * {{ mmtests_thpchallenge_fio_wsetsize }} / 100 ))
