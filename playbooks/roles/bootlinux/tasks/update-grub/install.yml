# There is slightly confusing user-experience and not complete documentation
# about the requirements for using grub-set-default in light of the fact that
# most Linux distributions use sub-menus. You need to use GRUB_DEFAULT=saved
# there is a few caveats with its use which are not well documented anywhere
# and I'm pretty sure tons of people are running into these issues.
#
# I'll document them here for posterity and so to justify the approach used
# in kdevops to ensure we do boot the correct kernel.
#
# Some users erroneously claim that you also need GRUB_SAVEDEFAULT=true when
# using GRUB_DEFAULT=saved but this is not true. The issue with using
# GRUB_DEFAULT=saved which causes confusion is that most distributions
# today use submenus folks do not take these into account when using
# grub-set-default and the documentation about grub-set-default is not
# clear about this requirement.
#
# Sadly, if you use a bogus kernel grub-set-default will not complain. For
# example since most distributions use submenus, if you install a new kernel you
# may end up in a situation as follows:
#
# menuentry 'Debian GNU/Linux' ... {
#   ...
# }
# submenu 'Advanced options for Debian GNU/Linux' ... {
#   menuentry 'Debian GNU/Linux, with Linux 5.16.0-4-amd64' ... {
#     ...
#   }
#   menuentry 'Debian GNU/Linux, with Linux 5.16.0-4-amd64 (recovery mode)' ... {
#     ...
#   }
#   menuentry 'Debian GNU/Linux, with Linux 5.10.105' ... {
#     ...
#   }
#   ... etc ...
# }
#
# So under this scheme the 5.10.105 kernel is actually "1>2" and so if
# you used:
#
#   grub-set-default 3
#
# This would not return an error and you would expect it to work. This
# is a bug in grub-set-default, it should return an error. The correct
# way to set this with submenus would be:
#
#   grub-set-default "1>2"
#
# However doing the reverse mapping is something which can get complicated
# and there is no upstream GRUB2 support to do this for you. We can simplify
# this problem instead by disabling the submenus, with GRUB_DISABLE_SUBMENU=y,
# making the menu flat and then just querying for the linear mapping using
# ansible using awk | grep and tail.
#
# So for instance, using GRUB_DISABLE_SUBMENU=y results in the following
# options:
#
# root@kdevops-xfs-nocrc ~ $ awk -F\' '/menuentry / {print $2}' /boot/grub/grub.cfg |  awk '{print NR-1" ... "$0}'
# 0 ... Debian GNU/Linux, with Linux 5.16.0-4-amd64
# 1 ... Debian GNU/Linux, with Linux 5.16.0-4-amd64 (recovery mode)
# 2 ... Debian GNU/Linux, with Linux 5.10.105
# 3 ... Debian GNU/Linux, with Linux 5.10.105 (recovery mode)
# 4 ... Debian GNU/Linux, with Linux 5.10.0-5-amd64
# 5 ... Debian GNU/Linux, with Linux 5.10.0-5-amd64 (recovery mode)
#
# We have a higher degree of confidence with this structure when looking
# for "5.10.105" that its respective boot entry 2 is the correct one. So we'd
# now just use:
#
#   grub-set-default 2
- name: Ensure we have GRUB_DEFAULT=saved
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  register: grub_default_saved_cmd
  lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_DEFAULT='
    line: GRUB_DEFAULT=saved
  tags: [ 'saved' ]

- name: Use GRUB_DISABLE_SUBMENU=y to enable grub-set-default use with one digit
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  register: grub_disable_submenu_cmd
  lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_DISABLE_SUBMENU='
    line: GRUB_DISABLE_SUBMENU=y
  tags: [ 'saved' ]

- name: Update your boot GRUB file if necessary to ensure GRUB flat earth
  tags: [ 'uninstall-linux', 'manual-update-grub' ]
  import_tasks: update-grub/main.yml

- name: Get the name of the kernel release to install (source tree)
  tags:
    - vars
  block:
    - name: Set the pathname used to extract the kernel release
      ansible.builtin.set_fact:
        kernelrelease_file: "{{ target_linux_dir_path }}/include/config/kernel.release"

    - name: Stat {{ kernelrelease_file }}
      ansible.builtin.stat:
        get_checksum: false
        get_mime: false
        path: "{{ kernelrelease_file }}"
      register: kernel_release_file

    - name: Slurp {{ kernelrelease_file }}
      ansible.builtin.slurp:
        src: "{{ kernelrelease_file }}"
      register: slurped_kernel_release
      when:
        - kernel_release_file.stat.exists

    - name: Get the kernel release of the kernel to be installed
      ansible.builtin.set_fact:
        kernelrelease: "{{ slurped_kernel_release.content | b64decode | trim }}"
      when:
        - kernel_release_file.stat.exists

- name: Set default kernelrelease if not determined
  ansible.builtin.set_fact:
    kernelrelease: "unknown"
  when:
    - kernelrelease is not defined

- name: Get the kernel release of the kernel to be installed
  tags:
    - vars
  ansible.builtin.set_fact:
    kernelrelease: "{{ slurped_kernel_release.content | b64decode | trim }}"
  when:
    - kernel_release_file.stat.exists

- name: Construct the command line to determine the default boot entry
  tags:
    - saved
  ansible.builtin.set_fact:
    determine_default_kernel_id: >-
      awk -F\' '/menuentry / {print $2}'
      /boot/grub/grub.cfg | awk '{print NR-1" ... "$0}' |
      grep {{ kernelrelease }} | head -1 | awk '{print $1}'
  when:
    - kernel_release_file is defined
    - kernel_release_file.stat is defined
    - kernel_release_file.stat.exists
    - kernelrelease is defined
    - kernelrelease != "unknown"
    - ansible_os_family != "RedHat" or ansible_distribution_major_version | int < 8

- name: Construct the command line to determine default boot entry for RHEL >= 8
  tags:
    - saved
  ansible.builtin.set_fact:
    determine_default_kernel_id: >-
      for f in $(ls -1 /boot/loader/entries/*.conf); do
      cat $f;
      done | grep title | awk '{ gsub("title ", "", $0); print }' | grep '{{ kernelrelease }}';
  when:
    - kernel_release_file is defined
    - kernel_release_file.stat is defined
    - kernel_release_file.stat.exists
    - kernelrelease is defined
    - kernelrelease != "unknown"
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version | int >= 8

# If this fails then grub-set-default won't be run, and the assumption here
# is either you do the work to enhance the heuristic or live happy with the
# assumption that grub2's default of picking the latest kernel is the best
# option.
- name: Determine the target kernel's GRUB boot entry number
  # noqa: command-instead-of-shell
  tags:
    - saved
  become: true
  become_flags: 'su - -c'
  become_method: ansible.builtin.sudo
  ansible.builtin.shell:
    cmd: "{{ determine_default_kernel_id }}"
  register: grub_boot_number_cmd
  changed_when: false
  when:
    - kernel_release_file is defined
    - kernel_release_file.stat is defined
    - kernel_release_file.stat.exists

- name: Obtain command to set default kernel to boot
  set_fact:
    grub_set_default_boot_kernel: grub-set-default
  when:
    ansible_facts['os_family']|lower != 'redhat' or ansible_facts['distribution_major_version'] | int < 8

- name: Obtain command to set default kernel to boot for RHEL >= 8
  set_fact:
    grub_set_default_boot_kernel: grub2-set-default
  when:
    ansible_facts['os_family']|lower == 'redhat' and ansible_facts['distribution_major_version'] | int >= 8

- name: Set the target kernel to be booted by default moving forward if the above command worked
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: "{{ grub_set_default_boot_kernel }} \"{{ target_boot_entry }}\""
  vars:
    target_boot_entry: "{{ grub_boot_number_cmd.stdout_lines.0 if (grub_boot_number_cmd is defined and grub_boot_number_cmd.stdout_lines is defined) else '' }}"
  tags: [ 'saved' ]
  when:
    - grub_boot_number_cmd is defined
    - grub_boot_number_cmd.rc is defined
    - grub_boot_number_cmd.rc == 0
    - grub_boot_number_cmd.stdout is defined
    - grub_boot_number_cmd.stdout != ""

- name: Itemize kernel and GRUB entry we just selected
  debug:
    msg: "{{ target_kernel }} determined to be {{ target_boot_entry }} on the GRUB2 flat menu. Ran: grub-set-default {{ target_boot_entry }}"
  vars:
    target_kernel: "{{ target_linux_ref | replace('v', '') }}"
    target_boot_entry: "{{ grub_boot_number_cmd.stdout_lines.0 }}"
  tags: [ 'saved' ]
  when:
    - grub_boot_number_cmd is defined
    - grub_boot_number_cmd.rc is defined
    - grub_boot_number_cmd.rc == 0
    - grub_boot_number_cmd.stdout is defined
    - grub_boot_number_cmd.stdout != ""

