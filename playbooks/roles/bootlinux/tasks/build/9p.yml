---
- name: Install dependencies to build the Linux kernel
  delegate_to: localhost
  run_once: true
  ansible.builtin.import_tasks:
    file: install-deps/main.yml

- name: Install b4 on host
  become: true
  become_method: sudo
  ansible.builtin.pip:
    name:
      - b4
  when:
    - target_linux_install_b4 is defined
    - target_linux_install_b4
    - ansible_facts['os_family']|lower != 'debian'
  run_once: true
  delegate_to: localhost

- name: Add safe exception for a clone
  ansible.builtin.command: "git config --global --add safe.directory {{ target_linux_git }}"
  tags: ["clone"]
  when:
    - target_linux_git is string and target_linux_git.startswith('/')
  run_once: true
  delegate_to: localhost
  vars:
    ansible_callback_diy_runner_on_ok_msg: |
      $ {{ ansible_callback_diy.result.output.cmd | join(' ') }}
      {{ ansible_callback_diy.result.output.stdout | default('') }}

- name: Check if target directory exists when using 9p and Linux CLI was set
  ansible.builtin.stat:
    path: "{{ bootlinux_9p_host_path }}"
  register: target_directory_stat
  run_once: true
  delegate_to: localhost
  when:
    - bootlinux_tree_set_by_cli|bool

- name: Fail if target directory does not exist when using 9p and Linux CLI was set
  ansible.builtin.fail:
    msg: "The target directory {{ bootlinux_9p_host_path }} does not exist."
  run_once: true
  delegate_to: localhost
  when:
    - bootlinux_tree_set_by_cli|bool
    - not target_directory_stat.stat.exists

- name: Git clone {{ target_linux_tree }} on the control node
  ansible.builtin.git:
    repo: "{{ target_linux_git }}"
    dest: "{{ bootlinux_9p_host_path }}"
    update: true
    depth: "{{ target_linux_shallow_depth }}"
    version: "{{ active_linux_ref | default(target_linux_ref) }}"
  retries: 3
  delay: 5
  register: result
  until: not result.failed
  tags: ["clone"]
  when:
    - not bootlinux_tree_set_by_cli|bool
  run_once: true
  delegate_to: localhost

- name: Copy kernel delta if requested on the control node
  ansible.builtin.template:
    src: "{{ target_linux_extra_patch }}"
    dest: "{{ bootlinux_9p_host_path }}/{{ target_linux_extra_patch }}"
    mode: "0644"
  when:
    - target_linux_extra_patch is defined
  run_once: true
  delegate_to: localhost

- name: Apply kernel delta if requested on the control node
  ansible.builtin.command: "git am {{ target_linux_extra_patch }}"
  args:
    chdir: "{{ bootlinux_9p_host_path }}"
  when:
    - target_linux_extra_patch is defined
  run_once: true
  delegate_to: localhost
  vars:
    ansible_callback_diy_runner_on_ok_msg: |
      $ {{ ansible_callback_diy.result.output.cmd | join(' ') }}
      {{ ansible_callback_diy.result.output.stdout | default('') }}

- name: Variable values
  ansible.builtin.debug:
    msg: "{{ target_linux_apply_patch_message_id }}"
  when:
    - target_linux_apply_patch_message_id is defined

- name: Apply message patch set if requested on the control node
  ansible.builtin.shell: b4 am -o - {{target_linux_apply_patch_message_id}} | git am
  args:
    chdir: "{{ bootlinux_9p_host_path }}"
  when:
    - target_linux_apply_patch_message_id is defined
    - target_linux_apply_patch_message_id | length > 0
    - bootlinux_b4_am_this_host|bool
  run_once: true
  delegate_to: localhost
  vars:
    ansible_callback_diy_runner_on_ok_msg: |
      $ {{ ansible_callback_diy.result.output.cmd | join(' ') }}
      {{ ansible_callback_diy.result.output.stdout | default('') }}

- name: Clean kernel source before configuration (make mrproper) on the control node
  community.general.make:
    chdir: "{{ bootlinux_9p_host_path }}"
    target: "mrproper"
  when: bootlinux_clean_before_build|default(false)|bool
  run_once: true
  delegate_to: localhost
  tags: ["build-linux"]

- name: Copy configuration for Linux {{ target_linux_tree }} on the control node
  ansible.builtin.template:
    src: "{{ linux_config }}"
    dest: "{{ bootlinux_9p_host_path }}/.config"
    mode: "0644"
  run_once: true
  delegate_to: localhost
  when: not bootlinux_use_config_fragments|default(false)|bool
  tags: ["build-linux"]

- name: Use configuration fragments for Linux {{ target_linux_tree }} on the control node
  ansible.builtin.import_tasks: ../config-fragments.yml
  run_once: true
  delegate_to: localhost
  vars:
    target_linux_dir_path: "{{ bootlinux_9p_host_path }}"
  when:
    - bootlinux_use_config_fragments|default(false)|bool

- name: Set kernel localversion if requested on the control node
  ansible.builtin.shell: "echo {{ active_linux_localversion | default(target_linux_localversion) }} > {{ bootlinux_9p_host_path }}/localversion"
  when:
    - (active_linux_localversion is defined and active_linux_localversion != "") or (target_linux_localversion is defined and target_linux_localversion != "")
  run_once: true
  delegate_to: localhost
  vars:
    ansible_callback_diy_runner_on_ok_msg: |
      $ {{ ansible_callback_diy.result.output.cmd | join(' ') }}
      {{ ansible_callback_diy.result.output.stdout | default('') }}

- name: Configure kernel with oldconfig (9P build - monolithic config only)
  ansible.builtin.shell: |
    set -o pipefail
    yes "" | make oldconfig
  register: configure_done
  changed_when: configure_done.rc == 0 or configure_done.rc == 141
  failed_when: configure_done.rc != 0 and configure_done.rc != 141
  environment: "{{ bootlinux_build_environment }}"
  args:
    chdir: "{{ bootlinux_9p_host_path }}"
    executable: /bin/bash
  run_once: true
  delegate_to: localhost
  when: not bootlinux_use_config_fragments|default(false)|bool
  vars:
    ansible_callback_diy_runner_on_ok_msg: |
      $ {{ ansible_callback_diy.result.output.cmd | join(' ') }}
      {{ ansible_callback_diy.result.output.stdout | default('') }}

- name: Get nproc on the control node
  ansible.builtin.command: "{{ num_jobs }}"
  tags: ["build-linux", "cxl-build"]
  register: nproc_9p
  run_once: true
  delegate_to: localhost
  vars:
    ansible_callback_diy_runner_on_ok_msg: |
      $ {{ ansible_callback_diy.result.output.cmd | join(' ') }}
      {{ ansible_callback_diy.result.output.stdout | default('') }}

- name: Debug kernel build command configuration for 9P build
  ansible.builtin.debug:
    msg: |
      === KERNEL BUILD COMMAND DEBUG (9P BUILD) ===
      build_jobs: {{ nproc_9p.stdout }}
      bootlinux_make_params: {{ bootlinux_make_params }}
      bootlinux_build_environment: {{ bootlinux_build_environment }}
      bootlinux_ccache: {{ bootlinux_ccache|default(false) }}
      bootlinux_compiler_clang: {{ bootlinux_compiler_clang|default(false) }}
      bootlinux_reproducible_builds: {{ bootlinux_reproducible_builds|default(false) }}
      bootlinux_ccache_kdevops_managed: {{ bootlinux_ccache_kdevops_managed|default(false) }}
  run_once: true
  delegate_to: localhost
  vars:
    ansible_callback_diy_runner_on_ok_msg: "{{ ansible_callback_diy.result.output.msg }}"
  tags: ["build-linux"]

- name: Test CC environment variable is working before build
  ansible.builtin.shell: |
    echo "CC environment test:"
    echo "CC=${CC:-'not set'}"
    echo "PATH=${PATH}"
    which gcc || echo "gcc not found"
    which ccache || echo "ccache not found"
    env | grep -E '^(CC|CCACHE|PATH)' | sort
  environment: "{{ bootlinux_build_environment }}"
  register: cc_test_result
  run_once: true
  delegate_to: localhost
  vars:
    ansible_callback_diy_runner_on_ok_msg: |
      CC Environment Test Results:
      {{ ansible_callback_diy.result.output.stdout | default('') }}
  tags: ["build-linux"]

- name: Get kernelversion
  community.general.make:
    chdir: "{{ bootlinux_9p_host_path }}"
    target: kernelversion
    params: "{{ bootlinux_make_params }}"
  environment: "{{ bootlinux_build_environment }}"
  register: target_linux_kernelversion
  tags: ["build-linux"]
  when:
    - (active_linux_kernelrelease | default(target_linux_kernelrelease)) | length > 0
  run_once: true
  delegate_to: localhost

- name: Generate user kernelrelease {{ target_linux_kernelversion.stdout | default('') }}-{{ active_linux_kernelrelease | default(target_linux_kernelrelease) }}
  ansible.builtin.set_fact:
    target_user_kernelrelease: "{{ target_linux_kernelversion.stdout }}-{{ active_linux_kernelrelease | default(target_linux_kernelrelease) }}"
  tags: ["build-linux"]
  when:
    - (active_linux_kernelrelease | default(target_linux_kernelrelease)) | length > 0
  run_once: true
  delegate_to: localhost

- name: Build {{ target_linux_tree }} {{ target_user_kernelrelease | default('') }} on the control node using {{ nproc_9p.stdout }} threads
  community.general.make:
    jobs: "{{ nproc_9p.stdout }}"
    chdir: "{{ bootlinux_9p_host_path }}"
    params: "{{ bootlinux_make_params | combine({'KERNELRELEASE': target_user_kernelrelease}) }}"
  environment: "{{ bootlinux_build_environment }}"
  tags: ["build-linux"]
  when:
    - (active_linux_kernelrelease | default(target_linux_kernelrelease)) | length > 0
  run_once: true
  delegate_to: localhost

- name: Build {{ target_linux_tree }} on the control node using {{ nproc_9p.stdout }} threads
  community.general.make:
    jobs: "{{ nproc_9p.stdout }}"
    chdir: "{{ bootlinux_9p_host_path }}"
    params: "{{ bootlinux_make_params }}"
  environment: "{{ bootlinux_build_environment }}"
  tags: ["build-linux"]
  when:
    - (active_linux_kernelrelease | default(target_linux_kernelrelease)) | length == 0
  run_once: true
  delegate_to: localhost

- name: Build {{ target_linux_tree }} cxl_test on the control node using {{ nproc_9p.stdout }} threads
  community.general.make:
    jobs: "{{ nproc_9p.stdout }}"
    chdir: "{{ bootlinux_9p_host_path }}"
    params: "{{ bootlinux_make_params | combine({'M': 'tools/testing/cxl'}) }}"
  environment: "{{ bootlinux_build_environment }}"
  tags: ["build-linux", "cxl-build"]
  when:
    - bootlinux_cxl_test|bool
  run_once: true
  delegate_to: localhost

- name: See if snake-oil cert file is present on host
  ansible.builtin.stat:
    path: "{{ bootlinux_9p_host_path }}/certs/signing_key.pem"
  register: snaik_oil_file_9p
  tags: ["build-linux"]
  run_once: true
  delegate_to: localhost

- name: Ensure we allow world to read the snake oil in case of NFS or 9p read only usage
  ansible.builtin.file:
    path: "{{ bootlinux_9p_host_path }}/certs/signing_key.pem"
    mode: "0755"
  tags: ["build-linux"]
  when:
    - snaik_oil_file_9p.stat.exists
  run_once: true
  delegate_to: localhost

- name: Generate distribution packages for 9P build
  when:
    - bootlinux_9p_build_packages | default(false) | bool
  run_once: true
  delegate_to: localhost
  tags: ["build-linux", "9p-packages"]
  block:
    - name: Generate kernel packages on controller
      ansible.builtin.include_tasks: ../packages/generate-packages.yml
      vars:
        kernel_build_dir: "{{ bootlinux_9p_host_path }}"
        package_jobs: "{{ nproc_9p.stdout }}"
        build_environment: "{{ bootlinux_build_environment }}"

    - name: Create repository directory
      ansible.builtin.file:
        path: "{{ bootlinux_9p_repository_path }}/{{ target_linux_ref | default('current') }}"
        state: directory
        mode: "u=rwx,g=rx,o=rx"

    - name: Copy packages to repository
      ansible.builtin.copy:
        src: "{{ item.path }}"
        dest: "{{ bootlinux_9p_repository_path }}/{{ target_linux_ref | default('current') }}/"
        mode: "u=rw,g=r,o=r"
      loop: "{{ generated_packages }}"
      loop_control:
        label: "Copying {{ item.path | basename }}"

    - name: Store kernel release in repository
      ansible.builtin.lineinfile:
        create: true
        line: "{{ extracted_kernelrelease }}"
        mode: "u=rw,g=r,o=r"
        path: "{{ bootlinux_9p_repository_path }}/{{ target_linux_ref | default('current') }}/kernel.release"

