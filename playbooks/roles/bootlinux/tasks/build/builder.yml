---
- name: Install b4
  become: true
  become_method: ansible.builtin.sudo
  ansible.builtin.pip:
    name:
      - b4
  when:
    - target_linux_install_b4 is defined
    - target_linux_install_b4
    - ansible_os_family == "Debian"

- name: Clone {{ target_linux_tree }}
  ansible.builtin.git:
    repo: "{{ target_linux_git }}"
    dest: "{{ target_linux_dir_path }}"
    update: true
    depth: "{{ target_linux_shallow_depth }}"
    version: "{{ target_linux_ref }}"
  register: result
  retries: 3
  delay: 5
  until: result is succeeded

- name: Copy the kernel delta to the builder
  ansible.builtin.template:
    src: "{{ target_linux_extra_patch }}"
    dest: "{{ target_linux_dir_path }}/{{ target_linux_extra_patch }}"
    owner: "{{ data_user }}"
    group: "{{ data_group }}"
    mode: "u=rw,g=r,o=r"
  when:
    - target_linux_extra_patch is defined

- name: Apply the kernel delta on the builder
  # noqa: command-instead-of-module
  ansible.builtin.command:
    cmd: "git am {{ target_linux_extra_patch }}"
    chdir: "{{ target_linux_dir_path }}"
  register: git_am
  changed_when: not git_am.failed
  when:
    - target_linux_extra_patch is defined

- name: Check git user name and email configuration
  when:
    - target_linux_apply_patch_message_id is defined
    - target_linux_apply_patch_message_id | length > 0
    - bootlinux_b4_am_this_host|bool
  block:
    - name: Get the user's git config info
      community.general.git_config_info:
        scope: global
      register: git_user_info

    - name: Set dummy git user email address
      community.general.git_config:
        name: user.email
        scope: global
        value: "user@example.com"
      when:
        - '"user.email" not in git_user_info.config_values'

    - name: Set dummy git user name
      community.general.git_config:
        name: user.name
        scope: global
        value: "Kdevops User"
      when:
        - '"user.name" not in git_user_info.config_values'

- name: Show the message_id
  ansible.builtin.debug:
    msg: "{{ target_linux_apply_patch_message_id }}"
  when:
    - target_linux_apply_patch_message_id is defined

- name: Apply a message patch set
  ansible.builtin.shell:
    chdir: "{{ target_linux_dir_path }}"
    cmd: |
      set -o pipefail
      b4 am -o - {{ target_linux_apply_patch_message_id }} | git am
  register: b4_am
  changed_when: not b4_am.failed
  when:
    - target_linux_apply_patch_message_id is defined
    - target_linux_apply_patch_message_id | length > 0
    - bootlinux_b4_am_this_host|bool

- name: Copy the configuration for kernel {{ target_linux_tree }}
  ansible.builtin.template:
    src: "{{ role_path }}/templates/{{ linux_config }}"
    dest: "{{ target_linux_dir_path }}/.config"
    owner: "{{ data_user }}"
    group: "{{ data_group }}"
    mode: "u=rw,g=r,o=r"

- name: Set the kernel localversion
  ansible.builtin.lineinfile:
    path: "{{ target_linux_dir_path }}/localversion"
    line: "{{ target_linux_localversion }}"
    mode: "u=rw,g=r,o=r"
    create: true
  when:
    - target_linux_localversion is defined
    - target_linux_localversion != ""

- name: Configure kernel {{ target_linux_tree }}
  community.general.make:
    chdir: "{{ target_linux_dir_path }}"
    target: "olddefconfig"
  when:
    - bootlinux_compiler_gcc|bool
    - not bootlinux_use_config_fragments|default(false)|bool

- name: Build {{ target_linux_tree }}
  community.general.make:
    chdir: "{{ target_linux_dir_path }}"
    jobs: "{{ ansible_processor_nproc }}"
    target: "all"
  when:
    - bootlinux_compiler_gcc|bool

- name: Configure kernel {{ target_linux_tree }}
  community.general.make:
    chdir: "{{ target_linux_dir_path }}"
    params:
      LLVM: 1
    target: "olddefconfig"
  when:
    - bootlinux_compiler_clang|bool
    - not bootlinux_use_config_fragments|default(false)|bool

- name: Build {{ target_linux_tree }}
  community.general.make:
    chdir: "{{ target_linux_dir_path }}"
    jobs: "{{ ansible_processor_nproc }}"
    params:
      LLVM: 1
    target: "all"
  when:
    - bootlinux_compiler_clang|bool

- name: Prepare artifacts directory for builder packages
  ansible.builtin.include_tasks: ../packages/prepare-artifacts-dir.yml
  vars:
    artifacts_target_dir: "{{ bootlinux_artifacts_dir }}"
    artifacts_clean: true
    artifacts_organize_by_version: false

- name: Generate kernel packages on builder node
  ansible.builtin.include_tasks: ../packages/generate-packages.yml
  vars:
    kernel_build_dir: "{{ target_linux_dir_path }}"
    package_generation_mode: "remote"
    package_jobs: "{{ ansible_processor_nproc }}"
    build_environment: "{{ bootlinux_build_environment | default({}) }}"

- name: Collect package artifacts from builder to controller
  ansible.builtin.include_tasks: ../packages/collect-artifacts.yml
  vars:
    artifacts_source_mode: "remote"

- name: Skip the kernel install steps
  ansible.builtin.meta: end_play
