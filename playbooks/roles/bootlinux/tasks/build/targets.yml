---
- name: Install b4
  become: yes
  become_method: sudo
  pip:
    name:
      - b4
  when:
    - target_linux_install_b4 is defined
    - target_linux_install_b4
    - ansible_facts['os_family']|lower != 'debian'

- name: Check if target directory exists
  stat:
    path: "{{ target_linux_dir_path }}"
  register: target_directory_stat

- name: Check if .git directory exists in target path
  stat:
    path: "{{ target_linux_dir_path }}/.git"
  register: git_directory_stat
  when:
    - target_directory_stat.stat.exists

- name: Infer that git clone is needed when .git doesn't exist
  set_fact:
    needs_git_clone: true
  when:
    - target_directory_stat.stat.exists
    - not git_directory_stat.stat.exists

- name: Set needs_git_clone when directory doesn't exist
  set_fact:
    needs_git_clone: true
  when:
    - not target_directory_stat.stat.exists

- name: Set needs_git_clone to false when .git exists
  set_fact:
    needs_git_clone: false
  when:
    - target_directory_stat.stat.exists
    - git_directory_stat.stat.exists

- name: Verify target git ref exists before cloning
  command: "git ls-remote {{ target_linux_git }} {{ target_linux_ref }}"
  register: ref_check
  tags: [ 'clone']
  when:
    - needs_git_clone|bool

- name: Fail if git ref does not exist
  fail:
    msg: |
      Failed to verify git ref '{{ target_linux_ref }}' exists in repository '{{ target_linux_git }}'.

      This typically happens when:
      1. The ref (branch/tag/commit) doesn't exist in the repository
      2. You're using A/B testing with a shallow clone that doesn't contain the required ref
      3. The repository URL is incorrect or inaccessible

      Please verify:
      - The ref '{{ target_linux_ref }}' exists in the repository
      - If using A/B testing with different refs, ensure shallow cloning is disabled
      - The repository URL '{{ target_linux_git }}' is correct and accessible
  when:
    - needs_git_clone|bool
    - ref_check.rc != 0

- name: Check if git tree is dirty
  command: "git -C {{ target_linux_dir_path }} status --porcelain"
  register: git_status
  changed_when: false
  failed_when: false
  when:
    - not needs_git_clone|bool
    - target_directory_stat.stat.exists
    - git_directory_stat.stat.exists

- name: Fail if git tree has local modifications
  fail:
    msg: |
      Local modifications exist in the destination: {{ target_linux_dir_path }}

      The git tree is dirty with uncommitted changes. This prevents safe git operations.

      To resolve this, you can:
      1. Commit or stash your changes in {{ target_linux_dir_path }}
      2. Reset the tree with: git -C {{ target_linux_dir_path }} reset --hard
      3. Remove the directory and let kdevops clone fresh: rm -rf {{ target_linux_dir_path }}

      Modified files:
      {{ git_status.stdout }}
  when:
    - not needs_git_clone|bool
    - target_directory_stat.stat.exists
    - git_directory_stat.stat.exists
    - git_status.stdout | length > 0

- name: git clone {{ target_linux_tree }} on the target nodes
  git:
    repo: "{{ target_linux_git }}"
    dest: "{{ target_linux_dir_path }}"
    update: yes
    depth: "{{ target_linux_shallow_depth }}"
    version: "{{ target_linux_ref }}"
  retries: 3
  delay: 5
  register: result
  until: not result.failed
  tags: [ 'clone']
  when:
    - needs_git_clone|bool

- name: Get current git ref when git exists but clone wasn't needed
  command: "git -C {{ target_linux_dir_path }} rev-parse HEAD"
  register: current_ref
  changed_when: false
  when:
    - not needs_git_clone|bool
    - target_directory_stat.stat.exists
    - git_directory_stat.stat.exists

- name: Get target ref SHA
  command: "git -C {{ target_linux_dir_path }} rev-parse {{ target_linux_ref }}"
  register: target_ref_sha
  changed_when: false
  failed_when: false
  when:
    - not needs_git_clone|bool
    - target_directory_stat.stat.exists
    - git_directory_stat.stat.exists

- name: Fetch updates if target ref doesn't exist locally
  command: "git -C {{ target_linux_dir_path }} fetch origin"
  when:
    - not needs_git_clone|bool
    - target_directory_stat.stat.exists
    - git_directory_stat.stat.exists
    - target_ref_sha.rc != 0

- name: Get target ref SHA after fetch
  command: "git -C {{ target_linux_dir_path }} rev-parse {{ target_linux_ref }}"
  register: target_ref_sha_after_fetch
  changed_when: false
  when:
    - not needs_git_clone|bool
    - target_directory_stat.stat.exists
    - git_directory_stat.stat.exists
    - target_ref_sha.rc != 0

- name: Checkout target ref if not on correct ref
  command: "git -C {{ target_linux_dir_path }} checkout {{ target_linux_ref }}"
  when:
    - not needs_git_clone|bool
    - target_directory_stat.stat.exists
    - git_directory_stat.stat.exists
    - (target_ref_sha.rc == 0 and current_ref.stdout != target_ref_sha.stdout) or
      (target_ref_sha.rc != 0 and target_ref_sha_after_fetch is defined and target_ref_sha_after_fetch.rc == 0)

- name: Copy kernel delta if requested on the target nodes
  template:
    src: "{{ target_linux_extra_patch }}"
    dest: "{{ target_linux_dir_path }}/{{ target_linux_extra_patch }}"
    owner: "{{ data_user }}"
    group: "{{ data_group }}"
    mode: 0644
  when:
    - target_linux_extra_patch is defined

- name: Apply kernel delta if requested on the target nodes
  command: "git am {{ target_linux_extra_patch }}"
  args:
    chdir: "{{ target_linux_dir_path }}"
  when:
    - target_linux_extra_patch is defined

- name: Set git user name and email if needed
  shell: |
    if ! $(git config --get user.email) ; then
      git config --global user.email user@example.com
    fi
    if ! $(git config --get user.name) ; then
      git config --global user.name user
    fi
  when:
    - target_linux_apply_patch_message_id is defined
    - target_linux_apply_patch_message_id | length > 0
    - bootlinux_b4_am_this_host|bool

- name: Variable values
  debug:
    msg: "{{ target_linux_apply_patch_message_id }}"
  when:
    - target_linux_apply_patch_message_id is defined

- name: Apply message patch set if requested on the target nodes
  shell: b4 am -o - {{target_linux_apply_patch_message_id}} | git am
  args:
    chdir: "{{ target_linux_dir_path }}"
  when:
    - target_linux_apply_patch_message_id is defined
    - target_linux_apply_patch_message_id | length > 0
    - bootlinux_b4_am_this_host|bool

- name: Copy configuration for Linux {{ target_linux_tree }} to the target nodes
  template:
    src: "{{ linux_config }}"
    dest: "{{ target_linux_dir_path }}/.config"
    owner: "{{ data_user }}"
    group: "{{ data_group }}"
    mode: 0644

- name: Set kernel localversion if requested on the target nodes
  shell: "echo {{ target_linux_localversion }} > {{ target_linux_dir_path }}/localversion"
  when:
    - target_linux_localversion is defined and target_linux_localversion != ""

- name: Configure Linux {{ target_linux_tree }} on the target nodes
  shell: |
    set -o pipefail
    yes "" | make oldconfig
  register: configure_done
  changed_when: configure_done.rc == 0 or configure_done.rc == 141
  failed_when: configure_done.rc != 0 and configure_done.rc != 141
  args:
    chdir: "{{ target_linux_dir_path }}"
    executable: /bin/bash

- name: Build {{ target_linux_tree }} on the target nodes
  command: "{{ target_linux_make_cmd }}"
  register: build
  changed_when: "build.rc == 0"
  args:
    chdir: "{{ target_linux_dir_path }}"
  tags: [ 'build-linux' ]

- name: Build {{ target_linux_tree }} cxl_test on the target nodes
  command: "{{ target_linux_make_cmd }} M=tools/testing/cxl"
  register: build_cxl_test
  changed_when: "build_cxl_test.rc == 0"
  args:
    chdir: "{{ target_linux_dir_path }}"
  tags: [ 'build-linux', 'cxl-build' ]
  when:
    - bootlinux_cxl_test|bool

- name: See if snake-oil cert file is present on client
  stat:
    path: "{{ target_linux_dir_path }}/certs/signing_key.pem"
  register: snaik_oil_file
  tags: [ 'build-linux' ]

- name: Ensure we allow world to read the snake oil in case of NFS or 9p read only usage
  file:
    path: "{{ target_linux_dir_path }}/certs/signing_key.pem"
    mode: "0755"
  tags: [ 'build-linux' ]
  when:
    - snaik_oil_file.stat.exists
