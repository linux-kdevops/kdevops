---
- name: Install b4
  become: yes
  become_method: sudo
  pip:
    name:
      - b4
  when:
    - target_linux_install_b4 is defined
    - target_linux_install_b4
    - ansible_facts['os_family']|lower != 'debian'

- name: git clone {{ target_linux_tree }} on the target nodes
  git:
    repo: "{{ target_linux_git }}"
    dest: "{{ target_linux_dir_path }}"
    update: yes
    depth: "{{ target_linux_shallow_depth }}"
    version: "{{ target_linux_ref }}"
  retries: 3
  delay: 5
  register: result
  until: not result.failed
  tags: [ 'clone']

- name: Copy kernel delta if requested on the target nodes
  template:
    src: "{{ target_linux_extra_patch }}"
    dest: "{{ target_linux_dir_path }}/{{ target_linux_extra_patch }}"
    owner: "{{ data_user }}"
    group: "{{ data_group }}"
    mode: 0644
  when:
    - target_linux_extra_patch is defined

- name: Apply kernel delta if requested on the target nodes
  command: "git am {{ target_linux_extra_patch }}"
  args:
    chdir: "{{ target_linux_dir_path }}"
  when:
    - target_linux_extra_patch is defined

- name: Set git user name and email if needed
  shell: |
    if ! $(git config --get user.email) ; then
      git config --global user.email user@example.com
    fi
    if ! $(git config --get user.name) ; then
      git config --global user.name user
    fi
  when:
    - target_linux_apply_patch_message_id is defined
    - target_linux_apply_patch_message_id | length > 0
    - bootlinux_b4_am_this_host|bool

- name: Variable values
  debug:
    msg: "{{ target_linux_apply_patch_message_id }}"
  when:
    - target_linux_apply_patch_message_id is defined

- name: Apply message patch set if requested on the target nodes
  shell: b4 am -o - {{target_linux_apply_patch_message_id}} | git am
  args:
    chdir: "{{ target_linux_dir_path }}"
  when:
    - target_linux_apply_patch_message_id is defined
    - target_linux_apply_patch_message_id | length > 0
    - bootlinux_b4_am_this_host|bool

- name: Copy configuration for Linux {{ target_linux_tree }} to the target nodes
  template:
    src: "{{ linux_config }}"
    dest: "{{ target_linux_dir_path }}/.config"
    owner: "{{ data_user }}"
    group: "{{ data_group }}"
    mode: 0644

- name: Set kernel localversion if requested on the target nodes
  shell: "echo {{ target_linux_localversion }} > {{ target_linux_dir_path }}/localversion"
  when:
    - target_linux_localversion is defined and target_linux_localversion != ""

- name: Configure Linux {{ target_linux_tree }} on the target nodes
  shell: |
    set -o pipefail
    yes "" | make oldconfig
  register: configure_done
  changed_when: configure_done.rc == 0 or configure_done.rc == 141
  failed_when: configure_done.rc != 0 and configure_done.rc != 141
  args:
    chdir: "{{ target_linux_dir_path }}"
    executable: /bin/bash

- name: Build {{ target_linux_tree }} on the target nodes
  command: "{{ target_linux_make_cmd }}"
  register: build
  changed_when: "build.rc == 0"
  args:
    chdir: "{{ target_linux_dir_path }}"
  tags: [ 'build-linux' ]

- name: Build {{ target_linux_tree }} cxl_test on the target nodes
  command: "{{ target_linux_make_cmd }} M=tools/testing/cxl"
  register: build_cxl_test
  changed_when: "build_cxl_test.rc == 0"
  args:
    chdir: "{{ target_linux_dir_path }}"
  tags: [ 'build-linux', 'cxl-build' ]
  when:
    - bootlinux_cxl_test|bool

- name: See if snake-oil cert file is present on client
  stat:
    path: "{{ target_linux_dir_path }}/certs/signing_key.pem"
  register: snaik_oil_file
  tags: [ 'build-linux' ]

- name: Ensure we allow world to read the snake oil in case of NFS or 9p read only usage
  file:
    path: "{{ target_linux_dir_path }}/certs/signing_key.pem"
    mode: "0755"
  tags: [ 'build-linux' ]
  when:
    - snaik_oil_file.stat.exists
