---
- name: Import optional extra_args file
  include_vars: "{{ item }}"
  ignore_errors: yes
  with_first_found:
    - files:
      - "../extra_vars.yml"
      - "../extra_vars.yaml"
      - "../extra_vars.json"
      skip: true
  tags: vars

- name: Select the .config file for building the test kernel
  ansible.builtin.include_tasks:
    file: "{{ role_path }}/tasks/config.yml"

# Distro specific
- name: Install dependencies to build and install the Linux kernel
  ansible.builtin.import_tasks:
    file: install-deps/main.yml

- name: Install dependencies to build the Linux kernel
  delegate_to: localhost
  run_once: true
  ansible.builtin.import_tasks:
    file: install-deps/main.yml
  when:
    - bootlinux_9p|bool

# We do this regardless of what distro you use
- name: Install b4
  become: yes
  become_method: sudo
  pip:
    name:
      - b4
  when:
    - target_linux_install_b4 is defined
    - target_linux_install_b4
    - ansible_facts['os_family']|lower != 'debian'

- name: Install b4 on host
  become: yes
  become_method: sudo
  pip:
    name:
      - b4
  when:
    - target_linux_install_b4 is defined
    - target_linux_install_b4
    - bootlinux_9p|bool
    - ansible_facts['os_family']|lower != 'debian'
  run_once: true
  delegate_to: localhost

- name: Set bootlinux_b4_am_this_host as a fact for dev hosts only
  set_fact:
    bootlinux_b4_am_this_host: "{{ ansible_hostname | regex_search('^.*-dev$') is not none }}"
  when:
    - kdevops_baseline_and_dev|bool

- name: Enable b4 am all hosts if not deploying dev and baseline nodes
  set_fact:
    bootlinux_b4_am_this_host: True
  when:
    - not kdevops_baseline_and_dev|bool

- include_role:
    name: create_data_partition

# Distro agnostic stuff to build and boot Linux goes below

- name: Mount bootlinux 9p and add to fstab if it does not exist
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  mount:
    name: "{{ target_linux_dir_path }}"
    src: "{{ bootlinux_9p_mount_tag }}"
    fstype: "9p"
    opts: "ro,trans=virtio,version=9p2000.L,posixacl,cache=none"
    state: "mounted"
  tags: [ 'data_partition', '9p_mount' ]
  when:
    - bootlinux_9p|bool

- name: Add safe exception for a clone
  command: "git config --global --add safe.directory {{ target_linux_git }}"
  tags: [ 'clone']
  when:
    - bootlinux_9p|bool
    - target_linux_git is string and target_linux_git.startswith('/')
  run_once: true
  delegate_to: localhost

- name: Check if target directory exists when using 9p and Linux CLI was set
  stat:
    path: "{{ bootlinux_9p_host_path }}"
  register: target_directory_stat
  run_once: true
  delegate_to: localhost
  when:
    - bootlinux_9p|bool
    - bootlinux_tree_set_by_cli|bool

- name: Fail if target directory does not exist when using 9p and Linux CLI was set
  fail:
    msg: "The target directory {{ bootlinux_9p_host_path }} does not exist."
  run_once: true
  delegate_to: localhost
  when:
    - bootlinux_9p|bool
    - bootlinux_tree_set_by_cli|bool
    - not target_directory_stat.stat.exists

- name: git clone {{ target_linux_tree }} on the target nodes
  git:
    repo: "{{ target_linux_git }}"
    dest: "{{ target_linux_dir_path }}"
    update: yes
    depth: "{{ target_linux_shallow_depth }}"
    version: "{{ target_linux_ref }}"
  retries: 3
  delay: 5
  register: result
  until: not result.failed
  tags: [ 'clone']
  when:
    - not bootlinux_9p|bool

- name: git clone {{ target_linux_tree }} on the control node
  git:
    repo: "{{ target_linux_git }}"
    dest: "{{ bootlinux_9p_host_path }}"
    update: yes
    depth: "{{ target_linux_shallow_depth }}"
    version: "{{ target_linux_ref }}"
  retries: 3
  delay: 5
  register: result
  until: not result.failed
  tags: [ 'clone']
  when:
    - bootlinux_9p|bool
    - not bootlinux_tree_set_by_cli|bool
  run_once: true
  delegate_to: localhost

- name: Copy kernel delta if requested on the target nodes
  template:
    src: "{{ target_linux_extra_patch }}"
    dest: "{{ target_linux_dir_path }}/{{ target_linux_extra_patch }}"
    owner: "{{ data_user }}"
    group: "{{ data_group }}"
    mode: 0644
  when:
    - not bootlinux_9p|bool
    - target_linux_extra_patch is defined

- name: Copy kernel delta if requested on the control node
  template:
    src: "{{ target_linux_extra_patch }}"
    dest: "{{ bootlinux_9p_host_path }}/{{ target_linux_extra_patch }}"
    mode: 0644
  when:
    - bootlinux_9p|bool
    - target_linux_extra_patch is defined
  run_once: true
  delegate_to: localhost

- name: Apply kernel delta if requested on the target nodes
  command: "git am {{ target_linux_extra_patch }}"
  args:
    chdir: "{{ target_linux_dir_path }}"
  when:
    - not bootlinux_9p|bool
    - target_linux_extra_patch is defined

- name: Apply kernel delta if requested on the control node
  command: "git am {{ target_linux_extra_patch }}"
  args:
    chdir: "{{ bootlinux_9p_host_path }}"
  when:
    - bootlinux_9p|bool
    - target_linux_extra_patch is defined
  run_once: true
  delegate_to: localhost

- name: Set git user name and email if needed
  shell: |
    if ! $(git config --get user.email) ; then
      git config --global user.email user@example.com
    fi
    if ! $(git config --get user.name) ; then
      git config --global user.name user
    fi
  when:
    - target_linux_apply_patch_message_id is defined
    - target_linux_apply_patch_message_id | length > 0
    - bootlinux_b4_am_this_host|bool

- name: Variable values
  debug:
    msg: "{{ target_linux_apply_patch_message_id }}"
  when:
    - target_linux_apply_patch_message_id is defined

- name: Apply message patch set if requested on the target nodes
  shell: b4 am -o - {{target_linux_apply_patch_message_id}} | git am
  args:
    chdir: "{{ target_linux_dir_path }}"
  when:
    - not bootlinux_9p|bool
    - target_linux_apply_patch_message_id is defined
    - target_linux_apply_patch_message_id | length > 0
    - bootlinux_b4_am_this_host|bool

- name: Apply message patch set if requested on the control node
  shell: b4 am -o - {{target_linux_apply_patch_message_id}} | git am
  args:
    chdir: "{{ bootlinux_9p_host_path }}"
  when:
    - bootlinux_9p|bool
    - target_linux_apply_patch_message_id is defined
    - target_linux_apply_patch_message_id | length > 0
    - bootlinux_b4_am_this_host|bool
  run_once: true
  delegate_to: localhost

- name: Copy configuration for Linux {{ target_linux_tree }} to the target nodes
  template:
    src: "{{ linux_config }}"
    dest: "{{ target_linux_dir_path }}/.config"
    owner: "{{ data_user }}"
    group: "{{ data_group }}"
    mode: 0644
  when:
    - not bootlinux_9p|bool

- name: Copy configuration for Linux {{ target_linux_tree }} on the control node
  template:
    src: "{{ linux_config }}"
    dest: "{{ bootlinux_9p_host_path }}/.config"
    mode: 0644
  when:
    - bootlinux_9p|bool
  run_once: true
  delegate_to: localhost

- name: Set kernel localversion if requested on the target nodes
  shell: "echo {{ target_linux_localversion }} > {{ target_linux_dir_path }}/localversion"
  when:
    - not bootlinux_9p|bool
    - target_linux_localversion is defined and target_linux_localversion != ""

- name: Set kernel localversion if requested on the control node
  shell: "echo {{ target_linux_localversion }} > {{ bootlinux_9p_host_path }}/localversion"
  when:
    - bootlinux_9p|bool
    - target_linux_localversion is defined and target_linux_localversion != ""
  run_once: true
  delegate_to: localhost

- name: Configure Linux {{ target_linux_tree }} on the target nodes
  shell: |
    set -o pipefail
    yes "" | make oldconfig
  register: configure_done
  changed_when: configure_done.rc == 0 or configure_done.rc == 141
  failed_when: configure_done.rc != 0 and configure_done.rc != 141
  args:
    chdir: "{{ target_linux_dir_path }}"
    executable: /bin/bash
  when:
    - not bootlinux_9p|bool

- name: Configure Linux {{ target_linux_tree }} on the control node
  shell: |
    set -o pipefail
    yes "" | make oldconfig
  register: configure_done
  changed_when: configure_done.rc == 0 or configure_done.rc == 141
  failed_when: configure_done.rc != 0 and configure_done.rc != 141
  args:
    chdir: "{{ bootlinux_9p_host_path }}"
    executable: /bin/bash
  when:
    - bootlinux_9p|bool
  run_once: true
  delegate_to: localhost

- name: Build {{ target_linux_tree }} on the target nodes
  command: "{{ target_linux_make_cmd }}"
  register: build
  changed_when: "build.rc == 0"
  args:
    chdir: "{{ target_linux_dir_path }}"
  tags: [ 'build-linux' ]
  when:
    - not bootlinux_9p|bool

- name: Build {{ target_linux_tree }} cxl_test on the target nodes
  command: "{{ target_linux_make_cmd }} M=tools/testing/cxl"
  register: build_cxl_test
  changed_when: "build_cxl_test.rc == 0"
  args:
    chdir: "{{ target_linux_dir_path }}"
  tags: [ 'build-linux', 'cxl-build' ]
  when:
    - not bootlinux_9p|bool
    - bootlinux_cxl_test|bool

- name: See if snake-oil cert file is present on client
  stat:
    path: "{{ target_linux_dir_path }}/certs/signing_key.pem"
  register: snaik_oil_file
  tags: [ 'build-linux' ]
  when:
    - not bootlinux_9p|bool

- name: Ensure we allow world to read the snake oil in case of NFS or 9p read only usage
  file:
    path: "{{ target_linux_dir_path }}/certs/signing_key.pem"
    mode: "0755"
  tags: [ 'build-linux' ]
  when:
    - not bootlinux_9p|bool
    - snaik_oil_file.stat.exists

- name: Get nproc on the control node
  command: "{{ num_jobs }}"
  tags: [ 'build-linux', 'cxl-build' ]
  register: nproc_9p
  when:
    - bootlinux_9p|bool
  run_once: true
  delegate_to: localhost

- name: Get kernelversion
  make:
    chdir: "{{ bootlinux_9p_host_path }}"
    target: kernelversion
  register: target_linux_kernelversion
  tags: [ 'build-linux' ]
  when:
    - bootlinux_9p|bool
    - target_linux_kernelrelease | length > 0
  run_once: true
  delegate_to: localhost

- name: Generate user kernelrelease {{ target_linux_kernelversion.stdout }}-{{ target_linux_kernelrelease }}
  set_fact:
    target_user_kernelrelease: "{{ target_linux_kernelversion.stdout }}-{{ target_linux_kernelrelease }}"
  tags: [ 'build-linux' ]
  when:
    - bootlinux_9p|bool
    - target_linux_kernelrelease | length > 0
  run_once: true
  delegate_to: localhost

- name: Build {{ target_linux_tree }} {{ target_user_kernelrelease }} on the control node using {{ nproc_9p.stdout }} threads
  make:
    jobs: "{{ nproc_9p.stdout }}"
    chdir: "{{ bootlinux_9p_host_path }}"
    params:
      KERNELRELEASE={{ target_user_kernelrelease }}
  tags: [ 'build-linux' ]
  when:
    - bootlinux_9p|bool
    - target_linux_kernelrelease | length > 0
  run_once: true
  delegate_to: localhost

- name: Build {{ target_linux_tree }} {{ target_user_kernelrelease }} on the control node using {{ nproc_9p.stdout }} threads
  make:
    jobs: "{{ nproc_9p.stdout }}"
    chdir: "{{ bootlinux_9p_host_path }}"
  tags: [ 'build-linux' ]
  when:
    - bootlinux_9p|bool
    - target_linux_kernelrelease | length == 0
  run_once: true
  delegate_to: localhost

- name: Build {{ target_linux_tree }} cxl_test on the control node using {{ nproc_9p.stdout }} threads
  make:
    jobs: "{{ nproc_9p.stdout }}"
    chdir: "{{ bootlinux_9p_host_path }}"
    params:
      M: "tools/testing/cxl"
  tags: [ 'build-linux', 'cxl-build' ]
  when:
    - bootlinux_9p|bool
    - bootlinux_cxl_test|bool
  run_once: true
  delegate_to: localhost

- name: See if snake-oil cert file is present on host
  stat:
    path: "{{ bootlinux_9p_host_path }}/certs/signing_key.pem"
  register: snaik_oil_file_9p
  tags: [ 'build-linux' ]
  when:
    - bootlinux_9p|bool
  run_once: true
  delegate_to: localhost

- name: Ensure we allow world to read the snake oil in case of NFS or 9p read only usage
  file:
    path: "{{ bootlinux_9p_host_path }}/certs/signing_key.pem"
    mode: "0755"
  tags: [ 'build-linux' ]
  when:
    - bootlinux_9p|bool
    - snaik_oil_file_9p.stat.exists
  run_once: true
  delegate_to: localhost

- name: Run uname before
  command: "uname -r"
  register: uname_cmd_before
  tags: [ 'uninstall-linux' ]

- name: Check kernel uname for uninstall
  debug:
    msg: "Target kernel {{ target_linux_ref }} Running kernel {{ running_kernel }}"
  vars:
    running_kernel: "{{ uname_cmd_before.stdout_lines.0 }}"
  tags: [ 'uninstall-linux' ]

- name: Set kernel version if user did not provide one with KVER command line argument
  set_fact:
    uninstall_kernel_ver: "{{ uname_cmd_before.stdout_lines.0 }}"
  tags: [ 'uninstall-linux' ]
  when:
    - uninstall_kernel_enable|bool
    - uninstall_kernel_ver is not defined

- name: Check if files for old kernel exist
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  ansible.builtin.find:
    paths:
      - "/boot/"
      - "/lib/modules/"
    patterns:
      - "vmlinuz-{{ uninstall_kernel_ver }}"
      - "vmlinuz-{{ uninstall_kernel_ver }}.old"
      - "vmlinuz-{{ uninstall_kernel_ver }}+.old"
      - "initrd.img-{{ uninstall_kernel_ver }}"
      - "initrd.img-{{ uninstall_kernel_ver }}.old"
      - "initrd.img-{{ uninstall_kernel_ver }}+.old"
      - "config-{{ uninstall_kernel_ver }}"
      - "config-{{ uninstall_kernel_ver }}.old"
      - "config-{{ uninstall_kernel_ver }}+.old"
      - "System.map-{{ uninstall_kernel_ver }}"
      - "System.map-{{ uninstall_kernel_ver }}.old"
      - "System.map-{{ uninstall_kernel_ver }}+.old"
      - "{{ uninstall_kernel_ver }}"
      - "{{ uninstall_kernel_ver }}+"
  register: found_uninstall_kfiles
  tags: [ 'uninstall-linux' ]
  when:
    - uninstall_kernel_enable|bool
    - uninstall_kernel_ver is defined

- name: Remove an old version of Linux manually specified
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  file:
    state: absent
    path: "{{ item.path }}"
  tags: [ 'uninstall-linux' ]
  with_items:
    - "{{ found_uninstall_kfiles.files }}"
  loop_control:
    label: "Removing found {{ item.path }}"
  when:
    - uninstall_kernel_enable|bool
    - uninstall_kernel_ver is defined

# We use "console serial" so to enable real consoles to be
# preferred first, and fallback to the serial as secondary
# option. This let's us work with hardware serial consoles
# say on IPMIs and virtual guests ('virsh console').
- name: Ensure we can get the GRUB prompt on reboot
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_TERMINAL='
    line: GRUB_TERMINAL="console serial"

- name: Update your boot GRUB file if necessary
  tags: [ 'uninstall-linux', 'manual-update-grub' ]
  import_tasks: update-grub/main.yml

- name: Ensure we have DEFAULTDEBUG set
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  register: grub_default_saved_cmd
  lineinfile:
    path: /etc/sysconfig/kernel
    regexp: '^DEFAULTDEBUG='
    line: DEFAULTDEBUG=yes
  tags: [ 'saved' ]
  when: ansible_facts['os_family']|lower == 'redhat'

- name: Install {{ target_linux_tree }} on the target nodes
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: "{{ target_linux_make_install_cmd }}"
  register: install_done
  changed_when: "install_done.rc == 0"
  args:
    chdir: "{{ target_linux_dir_path }}"
  tags: [ 'install-linux' ]

- name: Install {{ target_linux_tree }} cxl_test on the target nodes
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: "{{ target_linux_make_install_cmd }} M=tools/testing/cxl INSTALL_MOD_DIR=updates"
  register: install_done
  changed_when: "install_done.rc == 0"
  args:
    chdir: "{{ target_linux_dir_path }}"
  tags: [ 'install-linux', 'cxl-install' ]
  when:
    - kdevops_workflow_enable_cxl|bool

- name: Set the default kernel if necessary
  tags: [ 'saved' ]
  import_tasks: update-grub/install.yml
  # when:
  #   - ansible_facts['os_family']|lower != 'redhat'

- name: Reboot into Linux {{ target_linux_tree }}
  become: yes
  become_method: sudo
  reboot:
  tags: [ 'reboot' ]

- name: Run uname
  command: "uname -r"
  register: uname_cmd
  tags: [ 'uname' ]

- name: Check kernel uname
  debug:
    msg: "Target kernel {{ target_linux_ref }} Running kernel {{ running_kernel }}"
  vars:
    running_kernel: "{{ uname_cmd.stdout_lines.0 }}"
  tags: [ 'uname' ]
