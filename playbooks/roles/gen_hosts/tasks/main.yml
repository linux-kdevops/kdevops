---
- name: Import optional extra_args file
  ansible.builtin.include_vars: "{{ item }}"
  ignore_errors: true
  with_first_found:
    - files:
        - "../extra_vars.yml"
        - "../extra_vars.yaml"
        - "../extra_vars.json"
      skip: true
  tags: vars

- name: Get our user
  ansible.builtin.command: "whoami"
  register: my_user

- name: Get our primary group
  ansible.builtin.command: "id -g -n"
  register: my_group

- name: Check if the inventory file exists already
  ansible.builtin.stat:
    path: "{{ ansible_cfg_inventory }}"
  register: kdevops_hosts_dest

- name: Ensure proper permission on the inventory file
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.file:
    path: "{{ ansible_cfg_inventory }}"
    owner: "{{ my_user.stdout }}"
    group: "{{ my_group.stdout }}"
  when:
    - kdevops_hosts_dest.stat.exists

- name: Verify Ansible inventory template file exists
  ansible.builtin.stat:
    path: "{{ kdevops_hosts_template_full_path }}"
  register: ansible_hosts_template

- name: Set fstests config file variable for {{ fstests_fstyp }}
  ansible.builtin.set_fact:
    is_fstests: true
    fs_config_path: "{{ kdevops_playbooks_dir_full_path }}/{{ fs_config_role_path }}"
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_fstests
    - ansible_hosts_template.stat.exists
  tags: vars

- name: Verify fstest config file exists
  ansible.builtin.stat:
    path: "{{ fs_config_path }}"
  register: fstests_config_file_reg
  when:
    - is_fstests|bool

- name: Generate the Ansible hosts file for a Linux kernel build
  tags: ["hosts"]
  ansible.builtin.template:
    src: "{{ kdevops_hosts_template }}"
    dest: "{{ ansible_cfg_inventory }}"
    force: true
    trim_blocks: true
    lstrip_blocks: true
  when:
    - bootlinux_builder
    - ansible_hosts_template.stat.exists

- name: Generate the Ansible inventory file
  tags: ["hosts"]
  ansible.builtin.template:
    src: "{{ kdevops_hosts_template }}"
    dest: "{{ ansible_cfg_inventory }}"
    force: true
    trim_blocks: true
    lstrip_blocks: true
  when:
    - not kdevops_workflows_dedicated_workflow
    - ansible_hosts_template.stat.exists
    - not kdevops_enable_nixos|default(false)|bool

- name: Generate the Ansible inventory file for NixOS
  tags: ['hosts']
  ansible.builtin.template:
    src: "{{ kdevops_hosts_template }}"
    dest: "{{ ansible_cfg_inventory }}"
    force: true
    trim_blocks: True
    lstrip_blocks: True
  when:
    - not kdevops_workflows_dedicated_workflow
    - ansible_hosts_template.stat.exists
    - kdevops_enable_nixos|default(false)|bool

- name: Update Ansible inventory access modification time so make sees it updated
  ansible.builtin.file:
    path: "{{ ansible_cfg_inventory }}"
    state: touch
    mode: "0755"

- name: Generate the Ansible inventory file for dedicated cxl work
  tags: ["hosts"]
  ansible.builtin.template:
    src: "{{ kdevops_hosts_template }}"
    dest: "{{ anisble_cfg_inventory }}"
    force: true
    trim_blocks: true
    lstrip_blocks: true
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_cxl
    - ansible_hosts_template.stat.exists

- name: Generate the Ansible inventory file for dedicated pynfs work
  tags: ["hosts"]
  ansible.builtin.template:
    src: "{{ kdevops_hosts_template }}"
    dest: "{{ ansible_cfg_inventory }}"
    force: true
    trim_blocks: true
    lstrip_blocks: true
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_pynfs
    - ansible_hosts_template.stat.exists

- name: Generate the Ansible inventory file for dedicated gitr workflow
  tags: ["hosts"]
  vars:
    gitr_enabled_hosts: "{{ gitr_enabled_test_groups | ansible.builtin.split }}"
  ansible.builtin.template:
    src: "{{ kdevops_hosts_template }}"
    dest: "{{ ansible_cfg_inventory }}"
    force: true
    trim_blocks: true
    lstrip_blocks: true
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_gitr
    - ansible_hosts_template.stat.exists

- name: Generate an Ansible inventory file for a dedicated ltp workflow
  tags: ["hosts"]
  vars:
    ltp_enabled_hosts: "{{ ltp_enabled_test_groups | ansible.builtin.split }}"
  ansible.builtin.template:
    src: "{{ kdevops_hosts_template }}"
    dest: "{{ ansible_cfg_inventory }}"
    force: true
    trim_blocks: true
    lstrip_blocks: true
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_ltp
    - ansible_hosts_template.stat.exists

- name: Generate the Ansible inventory file for dedicated nfstest workflow
  tags: ["hosts"]
  vars:
    nfstest_enabled_hosts: "{{ nfstest_enabled_test_groups | ansible.builtin.split }}"
  ansible.builtin.template:
    src: "{{ kdevops_hosts_template }}"
    dest: "{{ ansible_cfg_inventory }}"
    force: true
    trim_blocks: true
    lstrip_blocks: true
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_nfstest
    - ansible_hosts_template.stat.exists

- name: Set empty enabled test types list for fstests
  tags: ["hosts"]
  ansible.builtin.set_fact:
    fstests_enabled_test_types: []
  when:
    - is_fstests
    - ansible_hosts_template.stat.exists

- name: Check which fstests test types are enabled
  register: fstests_enabled_test_types_reg
  vars:
    fs: "{{ fstests_fstyp | upper }}"
    config_val: "{{ 'CONFIG_FSTESTS_' + fs + '_SECTION_' }}"
    fs_config_data: "{{ lookup('file', fs_config_path) }}"
    sections_without_default: "{{ fs_config_data | regex_replace('\\[default\\]', multiline=True) }}"
    sections_without_default_and_nfsd: "{{ sections_without_default | regex_replace('\\[nfsd\\]', multiline=True) }}"
    sections_lines: "{{ sections_without_default_and_nfsd | regex_findall('^\\[(.*)', multiline=True) }}"
    clean_section_lines: "{{ sections_lines | regex_replace('\\[') | regex_replace('\\]') }}"
    clean_section_lines_without_fsname: "{{ clean_section_lines | regex_replace(fstests_fstyp + '_') }}"
    config_sections_targets: "{{ clean_section_lines_without_fsname | replace(\"'\", '') | split(', ') }}"
  ansible.builtin.lineinfile:
    path: "{{ topdir_path }}/.config"
    regexp: "^({{ config_val + item.upper() }})=y"
    line: ""
  check_mode: true
  with_items: "{{ config_sections_targets }}"
  loop_control:
    label: "Checking for {{ config_val + item.upper() }}"
  when:
    - is_fstests
    - ansible_hosts_template.stat.exists

- name: Now expand the list of enabled fstests for valid configuration sections
  tags: ["hosts"]
  ansible.builtin.set_fact:
    fstests_enabled_test_types: "{{ fstests_enabled_test_types + [fstests_fstyp + '-' + item.item | regex_replace('_', '-')] }}"
  with_items: "{{ fstests_enabled_test_types_reg.results }}"
  loop_control:
    label: "Checking for {{ item.item }} "
  when:
    - is_fstests
    - ansible_hosts_template.stat.exists
    - item.changed

- name: Generate the Ansible inventory file for a dedicated fstests setup
  tags: ["hosts"]
  vars:
    fs_config_data: "{{ lookup('file', fs_config_path) }}"
    sections_without_default: "{{ fs_config_data | regex_replace('\\[default\\]', multiline=True) }}"
    sections_lines: "{{ sections_without_default | regex_findall('^\\[(.*)', multiline=True) }}"
    clean_section_lines: "{{ sections_lines | regex_replace('\\[') | regex_replace('\\]') }}"
    sections_replace_underscore: "{{ clean_section_lines | replace('_', '-') }}"
    sections: "{{ sections_replace_underscore | replace(\"'\", '') | split(', ') }}"
  ansible.builtin.template:
    src: "{{ kdevops_hosts_template }}"
    dest: "{{ ansible_cfg_inventory }}"
    force: true
    trim_blocks: true
    lstrip_blocks: true
  when:
    - is_fstests
    - ansible_hosts_template.stat.exists

- name: Infer enabled blktests test section types
  ansible.builtin.set_fact:
    blktests_enabled_test_types: >-
      {{
        lookup('file', topdir_path + '/.config')
        | regex_findall('^CONFIG_BLKTESTS_SECTION_(.*)=y$', multiline=True)
        | map('lower')
        | list
      }}
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_blktests
    - ansible_hosts_template.stat.exists

- name: Debug inferring block test types
  ansible.builtin.debug:
    var: blktests_enabled_test_types
  when:
    - false
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_blktests
    - ansible_hosts_template.stat.exists

- name: Generate the Ansible inventory file for a dedicated blktests setup
  tags: ["hosts"]
  ansible.builtin.template:
    src: "{{ kdevops_hosts_template }}"
    dest: "{{ ansible_cfg_inventory }}"
    force: true
    trim_blocks: true
    lstrip_blocks: true
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_blktests
    - ansible_hosts_template.stat.exists

- name: Infer enabled selftests test section types
  ansible.builtin.set_fact:
    selftests_enabled_test_types: >-
      {{
        lookup('file', topdir_path + '/.config')
        | regex_findall('^CONFIG_SELFTESTS_SECTION_(.*)=y$', multiline=True)
        | map('lower')
        | list
      }}
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_selftests
    - ansible_hosts_template.stat.exists

- name: Generate the Ansible inventory file for a dedicated selftests setup
  tags: ["hosts"]
  ansible.builtin.template:
    src: "{{ kdevops_hosts_template }}"
    dest: "{{ ansible_cfg_inventory }}"
    force: true
    trim_blocks: true
    lstrip_blocks: true
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_selftests
    - ansible_hosts_template.stat.exists

- name: Collect dynamically supported filesystems
  vars:
    supported_filesystems_variables: "{{ hostvars[inventory_hostname] | dict2items | selectattr('key', 'search', '^sysbench_supported_filesystem_') }}"
    local_supported_filesystems: "{{ supported_filesystems_variables | selectattr('value', 'eq', True) | map(attribute='key') | map('regex_replace', '^sysbench_supported_filesystem_',
      '') | list }}"
  ansible.builtin.set_fact:
    sysbench_enabled_filesystems: "{{ local_supported_filesystems }}"
    enabled_sysbench_tests: "{{ [] }}"
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_sysbench

- name: Collect enabled sysbench target sections for dynamically supported filesystems
  loop: "{{ sysbench_enabled_filesystems }}"
  loop_control:
    loop_var: fs
  vars:
    fs_section_prefix: "sysbench_{{ fs }}_section_"
    fs_section_variables: "{{ hostvars[inventory_hostname] | dict2items | selectattr('key', 'search', '^' + fs_section_prefix) }}"
    enabled_fs_sysbench: "{{ fs_section_variables | selectattr('value', 'eq', True) | map(attribute='key') | list }}"
    enabled_fs_sections: "{{ enabled_fs_sysbench | map('regex_replace', '^sysbench_', '') | list }}"
    enabled_fs: "{{ enabled_fs_sections | map('regex_replace', 'section_', '') | list }}"
    enabled_fs_node: "{{ enabled_fs | map('regex_replace', '_', '-') | list }}"
  ansible.builtin.set_fact:
    enabled_sysbench_tests: "{{ enabled_sysbench_tests + enabled_fs_node }}"
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_sysbench

- name: Generate the Ansible inventory file for a dedicated sysbench setup
  tags: ["hosts"]
  ansible.builtin.template:
    src: "{{ kdevops_hosts_template }}"
    dest: "{{ ansible_cfg_inventory }}"
    force: true
    trim_blocks: true
    lstrip_blocks: true
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_sysbench
    - ansible_hosts_template.stat.exists


- name: Generate the Ansible hosts file for a dedicated fio-tests setup
  tags: ["hosts"]
  ansible.builtin.template:
    src: "{{ kdevops_hosts_template }}"
    dest: "{{ ansible_cfg_inventory }}"
    force: true
    trim_blocks: true
    lstrip_blocks: true
    mode: "0644"
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_fio_tests
    - ansible_hosts_template.stat.exists
    - not kdevops_enable_nixos|default(false)|bool


- name: Infer enabled mmtests test types
  ansible.builtin.set_fact:
    mmtests_enabled_test_types: >-
      {{
        lookup('file', topdir_path + '/.config')
        | regex_findall('^CONFIG_MMTESTS_ENABLE_(.*)=y$', multiline=True)
        | map('lower')
        | list
      }}
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_mmtests
    - ansible_hosts_template.stat.exists

- name: Generate the Ansible hosts file for a dedicated mmtests setup
  tags: ["hosts"]
  ansible.builtin.template:
    src: "{{ kdevops_hosts_template }}"
    dest: "{{ ansible_cfg_inventory }}"
    force: true
    trim_blocks: true
    lstrip_blocks: true
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_mmtests
    - ansible_hosts_template.stat.exists

- name: Generate the Ansible hosts file for a dedicated reboot-limit setup
  tags: ["hosts"]
  ansible.builtin.template:
    src: "{{ kdevops_hosts_template }}"
    dest: "{{ ansible_cfg_inventory }}"
    force: true
    trim_blocks: true
    lstrip_blocks: true
  when:
    - kdevops_workflows_dedicated_workflow
    - workflows_reboot_limit
    - ansible_hosts_template.stat.exists

- name: Load AI nodes configuration for multi-filesystem setup
  include_vars:
    file: "{{ topdir_path }}/{{ kdevops_nodes }}"
    name: guestfs_nodes
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_ai
    - ai_enable_multifs_testing|default(false)|bool
    - ansible_hosts_template.stat.exists

- name: Extract AI node names for multi-filesystem setup
  set_fact:
    all_generic_nodes: "{{ guestfs_nodes.guestfs_nodes | map(attribute='name') | list }}"
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_ai
    - ai_enable_multifs_testing|default(false)|bool
    - guestfs_nodes is defined

- name: Generate the Ansible hosts file for a dedicated AI setup
  tags: ['hosts']
  ansible.builtin.template:
    src: "{{ kdevops_hosts_template }}"
    dest: "{{ ansible_cfg_inventory }}"
    force: true
    trim_blocks: True
    lstrip_blocks: True
    mode: '0644'
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_ai
    - ansible_hosts_template.stat.exists

- name: Verify if final host file exists
  ansible.builtin.stat:
    path: "{{ ansible_cfg_inventory }}"
  register: final_hosts_file

- name: Fail if the dedicated workflow has no rules for node configuration for hosts file configuration
  tags: ["hosts"]
  ansible.builtin.fail:
    msg: "Your dedicated workflow lacks rules for what nodes to use, go work on allowed topologies to parallelize testing one per node"
  when:
    - kdevops_workflows_dedicated_workflow
    - ansible_hosts_template.stat.exists
    - not final_hosts_file.stat.exists
