---
# Tasks to stop monitoring services and collect data after test execution

- name: Check if folio migration monitoring was started
  become: true
  become_method: sudo
  ansible.builtin.stat:
    path: /root/monitoring/folio_migration.pid
  register: folio_migration_pid_file
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool

- name: Stop folio migration monitoring
  become: true
  become_method: sudo
  ansible.builtin.shell: |
    if [ -f /root/monitoring/folio_migration.pid ]; then
      pid=$(cat /root/monitoring/folio_migration.pid)
      if ps -p $pid > /dev/null 2>&1; then
        kill $pid
        echo "Stopped monitoring process $pid"
      else
        echo "Monitoring process $pid was not running"
      fi
      rm -f /root/monitoring/folio_migration.pid
    fi
  register: stop_monitor
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_pid_file.stat.exists|default(false)

- name: Display stop monitoring status
  ansible.builtin.debug:
    msg: "{{ stop_monitor.stdout }}"
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - stop_monitor is defined
    - stop_monitor.changed|default(false)

- name: Check if monitoring data was collected
  become: true
  become_method: sudo
  ansible.builtin.stat:
    path: /root/monitoring/folio_migration_stats.txt
  register: folio_migration_data_file
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool

- name: Copy plot_migration_stats.py to target
  become: true
  become_method: sudo
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/roles/monitoring/files/plot_migration_stats.py"
    dest: /root/monitoring/plot_migration_stats.py
    mode: "0755"
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_data_file.stat.exists|default(false)

- name: Check if matplotlib is available for plotting
  become: true
  become_method: sudo
  ansible.builtin.command: python3 -c "import matplotlib.pyplot"
  register: matplotlib_check
  ignore_errors: true
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_data_file.stat.exists|default(false)

- name: Generate folio migration plots
  become: true
  become_method: sudo
  ansible.builtin.command: |
    python3 /root/monitoring/plot_migration_stats.py
      /root/monitoring/folio_migration_stats.txt
      -o /root/monitoring/folio_migration_plot.png
  args:
    chdir: /root/monitoring
  register: plot_generation
  ignore_errors: true
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_data_file.stat.exists|default(false)
    - matplotlib_check.rc == 0

- name: Log plot generation skip if matplotlib not available
  ansible.builtin.debug:
    msg: "Skipping plot generation - matplotlib not available on target system"
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_data_file.stat.exists|default(false)
    - matplotlib_check.rc != 0

- name: Debug monitoring collection start
  ansible.builtin.debug:
    msg: |
      Starting monitoring collection
      monitor_developmental_stats: {{ monitor_developmental_stats | default(false) }}
      monitor_folio_migration: {{ monitor_folio_migration | default(false) }}
      enable_monitoring: {{ enable_monitoring | default(false) }}
      kdevops_run_fstests: {{ kdevops_run_fstests | default(false) }}

- name: Set monitoring results path
  ansible.builtin.set_fact:
    monitoring_results_path: "{{ monitoring_results_base_path | default(topdir_path + '/workflows/fstests/results/monitoring') }}"

- name: Create local monitoring results directory
  ansible.builtin.file:
    path: "{{ monitoring_results_path }}"
    state: directory
  delegate_to: localhost
  run_once: true
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool

- name: Copy folio migration stats data to localhost
  become: true
  become_method: sudo
  ansible.builtin.fetch:
    src: /root/monitoring/folio_migration_stats.txt
    dest: "{{ monitoring_results_path }}/{{ ansible_hostname }}_folio_migration_stats.txt"
    flat: true
    validate_checksum: false
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_data_file.stat.exists|default(false)

- name: Check if plot was generated
  become: true
  become_method: sudo
  ansible.builtin.stat:
    path: /root/monitoring/folio_migration_plot.png
  register: folio_migration_plot_file
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool

- name: Copy folio migration plot to localhost
  become: true
  become_method: sudo
  ansible.builtin.fetch:
    src: /root/monitoring/folio_migration_plot.png
    dest: "{{ monitoring_results_path }}/{{ ansible_hostname }}_folio_migration_plot.png"
    flat: true
    validate_checksum: false
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_plot_file.stat.exists|default(false)

- name: Display monitoring data collection summary
  ansible.builtin.debug:
    msg: |
      Folio migration monitoring collection complete.
      Data saved to: {{ monitoring_results_path }}/{{ ansible_hostname }}_folio_migration_stats.txt
      {% if folio_migration_plot_file.stat.exists | default(false) %}
      Plot saved to: {{ monitoring_results_path }}/{{ ansible_hostname }}_folio_migration_plot.png
      {% endif %}
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_data_file.stat.exists|default(false)

# Generate plots on localhost after collecting data
- name: Check if matplotlib is available on localhost
  ansible.builtin.command: python3 -c "import matplotlib.pyplot"
  delegate_to: localhost
  register: localhost_matplotlib_check
  ignore_errors: true
  run_once: true
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool

- name: Generate folio migration plots on localhost
  ansible.builtin.command: "python3 {{ playbook_dir }}/roles/monitoring/files/plot_migration_stats.py\n  -o {{ monitoring_results_path }}/{{ ansible_hostname }}_folio_migration_plot.png\n\
    \  {{ monitoring_results_path }}/{{ ansible_hostname }}_folio_migration_stats.txt\n"
  delegate_to: localhost
  register: localhost_plot_generation
  ignore_errors: true
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_data_file.stat.exists|default(false)
    - localhost_matplotlib_check.rc == 0

- name: Log localhost plot generation status
  ansible.builtin.debug:
    msg: |
      {% if localhost_matplotlib_check.rc != 0 %}
      Skipping plot generation - matplotlib not available on localhost
      {% else %}
      Plot generated: {{ monitoring_results_path }}/{{ ansible_hostname }}_folio_migration_plot.png
      {% endif %}
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_data_file.stat.exists|default(false)

# Plot-fragmentation collection tasks
- name: Check if fragmentation monitoring was started
  become: true
  become_method: sudo
  ansible.builtin.stat:
    path: "{{ monitor_fragmentation_output_dir|default('/root/monitoring/fragmentation') }}/fragmentation_tracker.pid"
  register: fragmentation_pid_file
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_memory_fragmentation|default(false)|bool

- name: Stop fragmentation monitoring
  become: true
  become_method: sudo
  ansible.builtin.shell: |
    output_dir="{{ monitor_fragmentation_output_dir|default('/root/monitoring/fragmentation') }}"
    if [ -f "${output_dir}/fragmentation_tracker.pid" ]; then
      pid=$(cat "${output_dir}/fragmentation_tracker.pid")
      if ps -p $pid > /dev/null 2>&1; then
        kill -INT $pid  # Use INT signal to allow graceful shutdown
        echo "Sent INT signal to fragmentation tracker, waiting for it to save data..."

        # Wait indefinitely for the process to save and exit
        while ps -p $pid > /dev/null 2>&1; do
          sleep 1
        done
        echo "Stopped fragmentation monitoring process $pid"
      else
        echo "Fragmentation monitoring process $pid was not running"
      fi
      rm -f "${output_dir}/fragmentation_tracker.pid"
    fi

    # Save the end time
    date +"%Y-%m-%d %H:%M:%S" > "${output_dir}/end_time.txt"
  register: stop_fragmentation_monitor
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_memory_fragmentation|default(false)|bool
    - fragmentation_pid_file.stat.exists|default(false)

- name: Display stop fragmentation monitoring status
  ansible.builtin.debug:
    msg: "{{ stop_fragmentation_monitor.stdout }}"
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_memory_fragmentation|default(false)|bool
    - stop_fragmentation_monitor is defined
    - stop_fragmentation_monitor.changed|default(false)

- name: Generate fragmentation visualization
  become: true
  become_method: sudo
  ansible.builtin.shell: |
    cd /opt/fragmentation
    output_dir="{{ monitor_fragmentation_output_dir|default('/root/monitoring/fragmentation') }}"

    # Run the visualizer if data exists - it can handle corrupted JSON
    if [ -f "${output_dir}/fragmentation_data.json" ]; then
      python3 fragmentation_visualizer.py \
        "${output_dir}/fragmentation_data.json" \
        -o "${output_dir}/fragmentation_plot.png" 2>&1 | tee "${output_dir}/visualizer.log"

      # Check if visualization was successful
      if [ -f "${output_dir}/fragmentation_plot.png" ]; then
        echo "Generated fragmentation visualization successfully"
      else
        echo "Visualization failed - check visualizer.log for details"
      fi
    else
      echo "No fragmentation data found to visualize"
    fi
  register: generate_fragmentation_plot
  ignore_errors: true
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_memory_fragmentation|default(false)|bool

- name: List fragmentation monitoring output files
  become: true
  become_method: sudo
  ansible.builtin.find:
    paths: "{{ monitor_fragmentation_output_dir|default('/root/monitoring/fragmentation') }}"
    patterns: "*"
    file_type: file
  register: fragmentation_output_files
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_memory_fragmentation|default(false)|bool

- name: Create local fragmentation results directory
  ansible.builtin.file:
    path: "{{ monitoring_results_path }}/fragmentation"
    state: directory
  delegate_to: localhost
  run_once: true
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_memory_fragmentation|default(false)|bool
    - fragmentation_output_files.files is defined
    - fragmentation_output_files.files | length > 0

- name: Copy fragmentation monitoring data to localhost
  become: true
  become_method: sudo
  ansible.builtin.fetch:
    src: "{{ item.path }}"
    dest: "{{ monitoring_results_path }}/fragmentation/{{ ansible_hostname }}_{{ item.path | basename }}"
    flat: true
    validate_checksum: false
  loop: "{{ fragmentation_output_files.files | default([]) }}"
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_memory_fragmentation|default(false)|bool
    - fragmentation_output_files.files is defined

- name: Display fragmentation monitoring collection summary
  ansible.builtin.debug:
    msg: |
      Fragmentation monitoring collection complete.
      {% if fragmentation_output_files.files is defined and fragmentation_output_files.files | length > 0 %}
      Collected {{ fragmentation_output_files.files | length }} files
      Data saved to: {{ monitoring_results_path }}/fragmentation/
      Files collected:
      {% for file in fragmentation_output_files.files %}
        - {{ ansible_hostname }}_{{ file.path | basename }}
      {% endfor %}
      {% else %}
      No fragmentation data was collected.
      {% endif %}
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_memory_fragmentation|default(false)|bool

# Generate fragmentation comparison plots for multi-filesystem and XFS block size testing
- name: Check if fragmentation JSON files exist for comparison
  ansible.builtin.find:
    paths: "{{ monitoring_results_path }}/fragmentation"
    patterns: "*_fragmentation_data.json"
    file_type: file
  delegate_to: localhost
  run_once: true
  register: fragmentation_json_files
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_memory_fragmentation|default(false)|bool

- name: Generate fragmentation comparison plots
  ansible.builtin.shell: |
    cd "{{ monitoring_results_path }}/fragmentation"
    visualizer_script="{{ playbook_dir }}/roles/monitoring/files/fragmentation_visualizer.py"

    # Function to find first matching file
    find_file() {
      local pattern="$1"
      ls $pattern 2>/dev/null | head -1
    }

    # Function to generate comparison if both files exist
    generate_comparison() {
      local pattern1="$1"
      local pattern2="$2"
      local label1="$3"
      local label2="$4"
      local output="$5"

      local file1=$(find_file "$pattern1")
      local file2=$(find_file "$pattern2")

      if [ -n "$file1" ] && [ -n "$file2" ] && [ -f "$file1" ] && [ -f "$file2" ]; then
        echo "Generating comparison: $label1 vs $label2"
        echo "  Using files: $file1 and $file2"
        python3 "$visualizer_script" "$file1" --compare "$file2" \
          --labels "$label1" "$label2" -o "$output" 2>&1 | tee -a comparison_generation.log
        if [ -f "$output" ]; then
          echo "  Created: $output"
        fi
      else
        echo "Skipping $label1 vs $label2 - one or both files not found"
      fi
    }

    echo "Starting fragmentation comparison generation..."
    echo "Available JSON files:"
    ls -1 *_fragmentation_data.json 2>/dev/null || echo "No fragmentation data files found"
    echo ""

    # XFS block size comparisons (if multiple XFS block sizes exist)
    generate_comparison \
      "*xfs-4k*_fragmentation_data.json" \
      "*xfs-16k*_fragmentation_data.json" \
      "XFS 4k" "XFS 16k" \
      "comparison_xfs_4k_vs_16k.png"

    generate_comparison \
      "*xfs-4k*_fragmentation_data.json" \
      "*xfs-32k*_fragmentation_data.json" \
      "XFS 4k" "XFS 32k" \
      "comparison_xfs_4k_vs_32k.png"

    generate_comparison \
      "*xfs-16k*_fragmentation_data.json" \
      "*xfs-32k*_fragmentation_data.json" \
      "XFS 16k" "XFS 32k" \
      "comparison_xfs_16k_vs_32k.png"

    # Filesystem comparisons (if multiple filesystems exist)
    generate_comparison \
      "*ext4*_fragmentation_data.json" \
      "*btrfs*_fragmentation_data.json" \
      "EXT4" "Btrfs" \
      "comparison_ext4_vs_btrfs.png"

    generate_comparison \
      "*ext4*_fragmentation_data.json" \
      "*xfs-4k*_fragmentation_data.json" \
      "EXT4" "XFS 4k" \
      "comparison_ext4_vs_xfs4k.png"

    generate_comparison \
      "*btrfs*_fragmentation_data.json" \
      "*xfs-4k*_fragmentation_data.json" \
      "Btrfs" "XFS 4k" \
      "comparison_btrfs_vs_xfs4k.png"

    # Count generated comparisons
    echo ""
    comparison_count=$(ls -1 comparison_*.png 2>/dev/null | wc -l)
    echo "Summary: Generated $comparison_count comparison plots"
    if [ "$comparison_count" -gt 0 ]; then
      echo "Comparison files created:"
      ls -1 comparison_*.png 2>/dev/null
    fi
  args:
    executable: /bin/bash
  delegate_to: localhost
  run_once: true
  register: comparison_generation
  ignore_errors: true
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_memory_fragmentation|default(false)|bool
    - fragmentation_json_files.files is defined
    - fragmentation_json_files.files | length > 1

- name: Display comparison generation results
  ansible.builtin.debug:
    msg: "{{ comparison_generation.stdout }}"
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_memory_fragmentation|default(false)|bool
    - comparison_generation is defined
    - comparison_generation.changed|default(false)
