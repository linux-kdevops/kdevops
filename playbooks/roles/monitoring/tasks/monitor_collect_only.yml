---
# Tasks to collect monitoring data WITHOUT stopping the monitoring services
# This allows peeking at intermediate results during long-running tests

- name: Check if monitoring data exists (without stopping monitoring)
  become: true
  become_method: sudo
  ansible.builtin.stat:
    path: /root/monitoring/folio_migration_stats.txt
  register: folio_migration_data_file
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool

- name: Check if fragmentation tracker is running
  become: true
  become_method: sudo
  ansible.builtin.shell: |
    output_dir="{{ monitor_fragmentation_output_dir|default('/root/monitoring/fragmentation') }}"
    if [ -f "${output_dir}/fragmentation_tracker.pid" ]; then
      pid=$(cat "${output_dir}/fragmentation_tracker.pid")
      if ps -p $pid > /dev/null 2>&1; then
        echo "running"
      else
        echo "not_running"
      fi
    else
      echo "no_pid_file"
    fi
  register: fragmentation_tracker_status
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_memory_fragmentation|default(false)|bool

- name: Copy fragmentation snapshot script to target
  become: true
  become_method: sudo
  ansible.builtin.copy:
    src: fragmentation_snapshot.py
    dest: /opt/fragmentation/fragmentation_snapshot.py
    mode: '0755'
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_memory_fragmentation|default(false)|bool

- name: Create fragmentation data snapshot
  become: true
  become_method: sudo
  ansible.builtin.command:
    cmd: python3 /opt/fragmentation/fragmentation_snapshot.py {{ monitor_fragmentation_output_dir|default('/root/monitoring/fragmentation') }}
  register: fragmentation_snapshot_creation
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_memory_fragmentation|default(false)|bool
    - fragmentation_tracker_status is defined
    - fragmentation_tracker_status.stdout is defined
    - fragmentation_tracker_status.stdout == "running"

- name: Display fragmentation snapshot status
  ansible.builtin.debug:
    msg: "Fragmentation snapshot: {{ fragmentation_snapshot_creation.stdout | default('No snapshot created') }}"
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_memory_fragmentation|default(false)|bool
    - fragmentation_snapshot_creation is defined

# Note: We don't need matplotlib on target hosts - plots are generated on localhost

- name: Create snapshot of monitoring data
  become: true
  become_method: sudo
  ansible.builtin.shell: |
    # Create a snapshot copy to avoid interfering with ongoing monitoring
    cp /root/monitoring/folio_migration_stats.txt /root/monitoring/folio_migration_stats_snapshot.txt
  args:
    chdir: /root/monitoring
  register: snapshot_creation
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_data_file.stat.exists|default(false)

# Plot generation happens on localhost, not on target hosts

- name: Debug monitoring collection status
  ansible.builtin.debug:
    msg: |
      Collecting monitoring data (without stopping monitoring)
      monitor_developmental_stats: {{ monitor_developmental_stats | default(false) }}
      monitor_folio_migration: {{ monitor_folio_migration | default(false) }}
      enable_monitoring: {{ enable_monitoring | default(false) }}
      Data file exists: {{ folio_migration_data_file.stat.exists | default(false) }}

- name: Set monitoring results path
  ansible.builtin.set_fact:
    monitoring_results_path: "{{ monitoring_results_base_path | default(topdir_path + '/workflows/fstests/results/monitoring') }}"

- name: Create local monitoring results directory
  ansible.builtin.file:
    path: "{{ monitoring_results_path }}"
    state: directory
    mode: "0755"
  delegate_to: localhost
  become: false
  run_once: true
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool

- name: Check if snapshot was created
  become: true
  become_method: sudo
  ansible.builtin.stat:
    path: /root/monitoring/folio_migration_stats_snapshot.txt
  register: folio_migration_snapshot_file
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool

- name: Copy folio migration stats snapshot to localhost
  become: true
  become_method: sudo
  ansible.builtin.fetch:
    src: /root/monitoring/folio_migration_stats_snapshot.txt
    dest: "{{ monitoring_results_path }}/{{ ansible_hostname }}_folio_migration_stats_interim.txt"
    flat: true
    validate_checksum: false
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_snapshot_file.stat.exists|default(false)

- name: Check if fragmentation snapshot was created
  become: true
  become_method: sudo
  ansible.builtin.stat:
    path: "{{ monitor_fragmentation_output_dir|default('/root/monitoring/fragmentation') }}/fragmentation_snapshot.json"
  register: fragmentation_snapshot_file
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_memory_fragmentation|default(false)|bool

- name: Copy fragmentation data snapshot to localhost
  become: true
  become_method: sudo
  ansible.builtin.fetch:
    src: "{{ monitor_fragmentation_output_dir|default('/root/monitoring/fragmentation') }}/fragmentation_snapshot.json"
    dest: "{{ monitoring_results_path }}/{{ ansible_hostname }}_fragmentation_data_interim.json"
    flat: true
    validate_checksum: false
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_memory_fragmentation|default(false)|bool
    - fragmentation_snapshot_file.stat.exists|default(false)

# Plots are generated on localhost, not fetched from targets

- name: Display interim monitoring data collection summary
  ansible.builtin.debug:
    msg: |
      Interim folio migration monitoring data collected (monitoring still running).
      Data saved to: {{ monitoring_results_path }}/{{ ansible_hostname }}_folio_migration_stats_interim.txt
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_snapshot_file.stat.exists|default(false)

# Generate plots on localhost from the collected data
- name: Check if matplotlib is available on localhost
  ansible.builtin.command: python3 -c "import matplotlib.pyplot"
  delegate_to: localhost
  register: localhost_matplotlib_check
  ignore_errors: true
  changed_when: false
  failed_when: false
  run_once: true
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool

- name: Collect all monitoring data files
  ansible.builtin.find:
    paths: "{{ monitoring_results_path }}"
    patterns: "*.txt"
    recurse: yes
  delegate_to: localhost
  register: all_monitoring_files
  run_once: true
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - localhost_matplotlib_check.rc == 0

- name: Copy plot generation script to localhost
  ansible.builtin.copy:
    src: plot_migration_stats.py
    dest: "{{ monitoring_results_path }}/plot_migration_stats.py"
    mode: '0755'
  delegate_to: localhost
  run_once: true
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - localhost_matplotlib_check.rc == 0

- name: Generate plots for each configuration
  ansible.builtin.command:
    cmd: "python3 {{ monitoring_results_path }}/plot_migration_stats.py {{ monitoring_results_path }}/{{ item }} -o {{ monitoring_results_path }}/{{ item | regex_replace('\\.txt$', '.png') }}"
  delegate_to: localhost
  with_items: "{{ all_monitoring_files.files | map(attribute='path') | map('basename') | select('match', '.*folio_migration.*\\.txt$') | list }}"
  register: plot_generation
  ignore_errors: true
  run_once: true
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - localhost_matplotlib_check.rc == 0
    - all_monitoring_files.files | length > 0

- name: Generate comprehensive comparison plot
  ansible.builtin.command:
    cmd: "python3 {{ monitoring_results_path }}/plot_migration_stats.py {{ monitoring_results_path }}/{{ all_monitoring_files.files | map(attribute='path') | map('basename') | select('match', '.*folio_migration.*\\.txt$') | list | first }} -o {{ monitoring_results_path }}/all_hosts_migration_summary.png"
  delegate_to: localhost
  register: comprehensive_plot_generation
  ignore_errors: true
  run_once: true
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - localhost_matplotlib_check.rc == 0
    - all_monitoring_files.files | select('match', '.*folio_migration.*') | list | length > 0

- name: Log plot generation summary
  ansible.builtin.debug:
    msg: |
      {% if localhost_matplotlib_check.rc != 0 %}
      Skipping plot generation - matplotlib not available on localhost
      {% else %}
      Plot generation complete:
      - A/B comparison plots generated for each configuration pair
      - Comprehensive plot generated: all_hosts_comprehensive.png
      {% endif %}
  run_once: true
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool

- name: Clean up snapshot files on target
  become: true
  become_method: sudo
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /root/monitoring/folio_migration_stats_snapshot.txt
    - /root/monitoring/folio_migration_plot_snapshot.png
    - "{{ monitor_fragmentation_output_dir|default('/root/monitoring/fragmentation') }}/fragmentation_snapshot.json"
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool or monitor_memory_fragmentation|default(false)|bool
  ignore_errors: true
