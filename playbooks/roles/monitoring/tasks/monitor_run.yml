---
# Tasks to start monitoring services before test execution

- name: Check if folio migration stats are available
  become: yes
  become_method: sudo
  stat:
    path: /sys/kernel/debug/mm/migrate/stats
  register: folio_migration_stats_file
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool

- name: Create monitoring directory
  become: yes
  become_method: sudo
  file:
    path: /root/monitoring
    state: directory
    mode: '0755'
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_stats_file.stat.exists|default(false)

- name: Start folio migration monitoring in background
  become: yes
  become_method: sudo
  shell: |
    nohup bash -c 'while true; do
      echo "$(date +"%Y-%m-%d %H:%M:%S")" >> /root/monitoring/folio_migration_stats.txt
      cat /sys/kernel/debug/mm/migrate/stats >> /root/monitoring/folio_migration_stats.txt
      echo "" >> /root/monitoring/folio_migration_stats.txt
      sleep {{ monitor_folio_migration_interval|default(60) }}
    done' > /root/monitoring/folio_migration.log 2>&1 &
    echo $! > /root/monitoring/folio_migration.pid
  async: 86400  # Run for up to 24 hours
  poll: 0
  register: folio_migration_monitor
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_stats_file.stat.exists|default(false)

- name: Save async job ID for later termination
  set_fact:
    folio_migration_monitor_job: "{{ folio_migration_monitor.ansible_job_id }}"
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_stats_file.stat.exists|default(false)
    - folio_migration_monitor is defined

- name: Verify monitoring started successfully
  become: yes
  become_method: sudo
  shell: |
    if [ -f /root/monitoring/folio_migration.pid ]; then
      pid=$(cat /root/monitoring/folio_migration.pid)
      if ps -p $pid > /dev/null 2>&1; then
        echo "Monitoring process $pid is running"
      else
        echo "ERROR: Monitoring process $pid is not running" >&2
        exit 1
      fi
    else
      echo "ERROR: PID file not found" >&2
      exit 1
    fi
  register: monitor_status
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_stats_file.stat.exists|default(false)

- name: Display monitoring status
  debug:
    msg: "{{ monitor_status.stdout }}"
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_stats_file.stat.exists|default(false)
    - monitor_status is defined
