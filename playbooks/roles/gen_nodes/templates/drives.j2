{#
This is a collection of macros to generate extra drives used by guestfs,
the drives can vary by type, so we have one macro by type of drive.
#}
{%- macro gen_drive_ide(num_drives,
			kdevops_storage_pool_path,
			hostname,
			libvirt_extra_drive_format,
			libvirt_extra_storage_aio_mode,
			libvirt_extra_storage_aio_cache_mode) -%}
<!-- We generated {{ num_drives }} ide dives -->
{% for n in range(0,num_drives) %}
    <!-- This is IDE drive # {{ n + 1 }} -->
    <qemu:arg value='-drive'/>
    <qemu:arg value='file={{ kdevops_storage_pool_path }}/guestfs/{{ hostname }}/extra{{ n }}.{{ libvirt_extra_drive_format }},format={{ libvirt_extra_drive_format }},aio={{ libvirt_extra_storage_aio_mode }},cache={{ libvirt_extra_storage_aio_cache_mode }},if=none,id=drv{{ n }}'/>
    <qemu:arg value='-device'/>
    <qemu:arg value="ide-hd,drive=drv{{ n }},bus=ide.{{ n }},serial=kdevops{{ n }}"/>
{% endfor %}
<!-- End of ide drives-->
{%- endmacro -%}
{%- macro gen_drive_virtio(num_drives,
			   kdevops_storage_pool_path,
			   hostname,
			   libvirt_extra_drive_format,
			   libvirt_extra_storage_aio_mode,
			   libvirt_extra_storage_aio_cache_mode,
			   libvirt_extra_storage_virtio_logical_block_size,
			   libvirt_extra_storage_virtio_physical_block_size) -%}
<!-- We generated {{ num_drives }} virtio dives -->
{% for n in range(0,num_drives) %}
    <!-- This is virtio drive # {{ n + 1 }} -->
    <qemu:arg value='-device'/>
    <qemu:arg value='pcie-root-port,id=pcie-port-for-virtio-{{ n }},multifunction=on,bus=pcie.1,addr=0x{{ "%0x" | format( n | int) }},chassis=5{{ n }}'/>
    <qemu:arg value="-object"/>
    <qemu:arg value="iothread,id=kdevops-virtio-iothread-{{ n }}"/>
    <qemu:arg value="-drive"/>
    <qemu:arg value="file={{ kdevops_storage_pool_path }}/guestfs/{{ hostname }}/extra{{ n }}.{{ libvirt_extra_drive_format }},format={{ libvirt_extra_drive_format }},if=none,aio={{ libvirt_extra_storage_aio_mode }},cache={{ libvirt_extra_storage_aio_cache_mode }},id=drv{{ n }}"/>
    <qemu:arg value="-device"/>
    <qemu:arg value="virtio-blk-pci,drive=drv{{ n }},id=virtio-drv{{ n }},serial=kdevops{{ n }},bus=pcie-port-for-virtio-{{ n }},addr=0x0,iothread=kdevops-virtio-iothread-{{ n }},logical_block_size={{ libvirt_extra_storage_virtio_logical_block_size }},physical_block_size={{ libvirt_extra_storage_virtio_physical_block_size }}"/>
{% endfor %}
<!-- End of virtio drives-->
{%- endmacro -%}
{%- macro gen_drive_scsi(num_drives,
                         kdevops_storage_pool_path,
                         hostname,
                         libvirt_extra_drive_format,
                         libvirt_extra_storage_aio_mode,
                         libvirt_extra_storage_aio_cache_mode) -%}
<!-- We generated {{ num_drives }} scsi dives -->
{% for n in range(0,num_drives) %}
    <!-- This is scsi drive # {{ n + 1 }} -->
    <qemu:arg value='-device'/>
    <qemu:arg value='pcie-root-port,id=pcie-port-for-scsi-{{ n }},multifunction=on,bus=pcie.1,addr=0x{{ "%0x" | format( n | int) }},chassis=5{{ n }}'/>
    <qemu:arg value='-device'/>
    <qemu:arg value='virtio-scsi-pci,id=scsi{{ n }},bus=pcie-port-for-scsi-{{ n }},addr=0x0'/>
    <qemu:arg value='-drive'/>
    <qemu:arg value='file={{ kdevops_storage_pool_path }}/guestfs/{{ hostname }}/extra{{ n }}.{{ libvirt_extra_drive_format }},format={{ libvirt_extra_drive_format }},if=none,aio={{ libvirt_extra_storage_aio_mode }},cache={{ libvirt_extra_storage_aio_cache_mode }},id=drv{{ n }}'/>
    <qemu:arg value='-device'/>
    <qemu:arg value='scsi-hd,drive=drv{{ n }},bus=scsi{{ n }}.0'/>
{% endfor %}
<!-- End of scsi drives-->
{%- endmacro -%}
{%- macro gen_drive_large_io_virtio(libvirt_largeio_logical_compat,
				    libvirt_largeio_logical_compat_size,
				    libvirt_largeio_pow_limit,
				    libvirt_largeio_drives_per_space,
				    hostname,
				    libvirt_extra_drive_format,
				    libvirt_extra_storage_aio_mode,
				    libvirt_extra_storage_aio_cache_mode,
				    kdevops_storage_pool_path) -%}
<!-- These are virtio drives used for large IO experimentation, with LBS support -->
{% set ns = namespace(lbs_idx=0)  %}
{% set max_pbs = libvirt_largeio_logical_compat_size  * (2 ** libvirt_largeio_pow_limit) %}
{% for n in range(0,libvirt_largeio_pow_limit+1) %}
{% for x in range(0,libvirt_largeio_drives_per_space) %}
{% set ns2 = namespace(pbs=libvirt_largeio_logical_compat_size  * (2 ** n)) %}
{% set ns3 = namespace(pbs_next_two=ns2.pbs * (2*(x-1))) %}
{% if libvirt_largeio_logical_compat %}
{% set ns4 = namespace(lbs=libvirt_largeio_logical_compat_size) %}
{% else %}
{% set ns4 = namespace(lbs=ns2.pbs) %}
{% endif %}
{% if (ns2.pbs == 512 or ns2.pbs == 4096 or ns2.pbs >= 16384) and (ns3.pbs_next_two <= max_pbs) %}
    <qemu:arg value='-device'/>
    <qemu:arg value='pcie-root-port,id=pcie-port-for-virtio-{{ ns.lbs_idx }},multifunction=on,bus=pcie.1,addr=0x{{ "%0x" | format( ns.lbs_idx | int) }},chassis={{ 50 + ns.lbs_idx  }}'/>
    <qemu:arg value="-object"/>
    <qemu:arg value="iothread,id=kdevops-virtio-iothread-{{ ns.lbs_idx }}"/>
    <qemu:arg value='-drive'/>
    <qemu:arg value='file={{ kdevops_storage_pool_path }}/guestfs/{{ hostname }}/extra{{ ns.lbs_idx }}.{{ libvirt_extra_drive_format }},format={{ libvirt_extra_drive_format }},if=none,aio={{ libvirt_extra_storage_aio_mode }},cache={{ libvirt_extra_storage_aio_cache_mode }},id=drv{{ ns.lbs_idx }}'/>
    <qemu:arg value='-device'/>
    <qemu:arg value="virtio-blk-pci,drive=drv{{ ns.lbs_idx }},id=virtio-drv{{ ns.lbs_idx }},serial=kdevops{{ ns.lbs_idx }},bus=pcie-port-for-virtio-{{ ns.lbs_idx }},addr=0x0,iothread=kdevops-virtio-iothread-{{ ns.lbs_idx }},logical_block_size={{  ns4.lbs }},physical_block_size={{ ns2.pbs }}"/>
{% endif %}
{% set ns.lbs_idx = ns.lbs_idx + 1 %}
{% endfor %}
{% endfor %}
<!-- End of virtio drives for large IO experimentation -->
{%- endmacro -%}
{%- macro gen_drive_nvme(num_drives,
			 kdevops_storage_pool_path,
			 hostname,
			 libvirt_extra_drive_format,
			 libvirt_extra_storage_aio_mode,
			 libvirt_extra_storage_aio_cache_mode,
			 libvirt_extra_storage_nvme_logical_block_size) -%}
<!-- We generated {{ num_drives }} NVMe dives -->
{% for n in range(0,num_drives) %}
    <!-- This is NVMe drive # {{ n + 1 }} -->
    <qemu:arg value='-device'/>
    <qemu:arg value='pcie-root-port,id=pcie-port-for-nvme-{{ n }},multifunction=on,bus=pcie.1,addr=0x{{ "%0x" | format( n | int) }},chassis=5{{ n }}'/>
    <qemu:arg value='-drive'/>
    <qemu:arg value='file={{ kdevops_storage_pool_path }}/guestfs/{{ hostname }}/extra{{ n }}.{{ libvirt_extra_drive_format }},format={{ libvirt_extra_drive_format }},if=none,id=drv{{ n }}'/>
    <qemu:arg value='-device'/>
    <qemu:arg value='nvme,id=nvme{{ n }},serial=kdevops{{ n }},bus=pcie-port-for-nvme-{{ n }},addr=0x0'/>
    <qemu:arg value='-device'/>
    <qemu:arg value='nvme-ns,drive=drv{{ n }},bus=nvme{{ n }},nsid=1,logical_block_size={{ libvirt_extra_storage_nvme_logical_block_size }},physical_block_size={{ libvirt_extra_storage_nvme_logical_block_size }}'/>
{% endfor %}
<!-- End of NVMe drives-->
{%- endmacro -%}
{%- macro gen_drive_large_io_nvme(libvirt_largeio_logical_compat,
				  libvirt_largeio_logical_compat_size,
				  libvirt_largeio_pow_limit,
				  libvirt_largeio_drives_per_space,
				  hostname,
				  libvirt_extra_drive_format,
				  libvirt_extra_storage_aio_mode,
				  libvirt_extra_storage_aio_cache_mode,
				  kdevops_storage_pool_path) -%}
<!-- These are NVMe drives used for large IO experimentation, with LBS support -->
{% set ns = namespace(lbs_idx=0)  %}
{% set max_pbs = libvirt_largeio_logical_compat_size  * (2 ** libvirt_largeio_pow_limit) %}
{% for n in range(0,libvirt_largeio_pow_limit+1) %}
{% for x in range(0,libvirt_largeio_drives_per_space) %}
{% set ns2 = namespace(pbs=libvirt_largeio_logical_compat_size  * (2 ** n)) %}
{% set ns3 = namespace(pbs_next_two=ns2.pbs * (2*(x-1))) %}
{% if libvirt_largeio_logical_compat %}
{% set ns4 = namespace(lbs=libvirt_largeio_logical_compat_size) %}
{% else %}
{% set ns4 = namespace(lbs=ns2.pbs) %}
{% endif %}
{% if (ns2.pbs == 512 or ns2.pbs == 4096 or ns2.pbs >= 16384) and (ns3.pbs_next_two <= max_pbs) %}
    <qemu:arg value='-device'/>
    <qemu:arg value='pcie-root-port,id=pcie-port-for-nvme-{{ ns.lbs_idx }},multifunction=on,bus=pcie.1,addr=0x{{ "%0x" | format( ns.lbs_idx | int) }},chassis={{ 50 + ns.lbs_idx }}'/>
    <qemu:arg value='-drive'/>
    <qemu:arg value='file={{ kdevops_storage_pool_path }}/guestfs/{{ hostname }}/extra{{ ns.lbs_idx }}.{{ libvirt_extra_drive_format }},format={{ libvirt_extra_drive_format }},if=none,id=drv{{ ns.lbs_idx }}'/>
    <qemu:arg value='-device'/>
    <qemu:arg value='nvme,id=nvme{{ ns.lbs_idx }},serial=kdevops{{ ns.lbs_idx }},bus=pcie-port-for-nvme-{{ ns.lbs_idx }},addr=0x0'/>
    <qemu:arg value='-device'/>
    <qemu:arg value='nvme-ns,drive=drv{{ ns.lbs_idx }},bus=nvme{{ ns.lbs_idx }},nsid=1,logical_block_size={{ ns4.lbs }},physical_block_size={{ ns2.pbs }}'/>
{% endif %}
{% set ns.lbs_idx = ns.lbs_idx + 1 %}
{% endfor %}
{% endfor %}
<!-- End of NVMe drives for large IO experimentation -->
{%- endmacro -%}
{% macro gen_9p_mount(bootlinux_9p_driver,
		       bootlinux_9p_fsdev,
		       bootlinux_9p_host_path,
		       bootlinux_9p_mount_tag,
		       bootlinux_9p_security_model,
		       pcie_addr) %}
<!-- This is a 9p mounted drive -->
    <qemu:arg value='-device'/>
    <qemu:arg value='{{ bootlinux_9p_driver }},fsdev={{ bootlinux_9p_fsdev }},mount_tag={{ bootlinux_9p_mount_tag }},bus=pcie.0,addr=0x{{ pcie_addr }}'/>
    <qemu:arg value='-fsdev'/>
    <qemu:arg value='local,id={{ bootlinux_9p_fsdev }},path={{ bootlinux_9p_host_path }},security_model={{ bootlinux_9p_security_model }}'/>
<!-- End of 9p mount -->
{% endmacro %}
