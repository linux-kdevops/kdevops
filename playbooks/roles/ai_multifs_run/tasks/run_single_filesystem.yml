---
- name: Display current filesystem configuration
  debug:
    msg: "Testing filesystem configuration {{ fs_index + 1 }}/{{ enabled_fs_configs | length }}: {{ fs_config.name }}"

- name: Unmount filesystem if mounted
  mount:
    path: "{{ ai_multifs_mount_point }}"
    state: unmounted
  ignore_errors: yes

- name: Create filesystem with specific configuration
  shell: "{{ fs_config.mkfs_cmd }} {{ ai_multifs_device }}"
  register: mkfs_result

- name: Display mkfs output
  debug:
    msg: "mkfs output: {{ mkfs_result.stdout }}"
  when: mkfs_result.stdout != ""

- name: Mount filesystem with specific options
  mount:
    path: "{{ ai_multifs_mount_point }}"
    src: "{{ ai_multifs_device }}"
    fstype: "{{ fs_config.filesystem }}"
    opts: "{{ fs_config.mount_opts }}"
    state: mounted

- name: Create filesystem-specific results directory
  file:
    path: "{{ ai_multifs_results_dir }}/{{ fs_config.name }}"
    state: directory
    mode: '0755'

- name: Update AI benchmark configuration for current filesystem
  set_fact:
    current_fs_benchmark_dir: "{{ ai_multifs_mount_point }}/ai-benchmark-data"
    current_fs_results_dir: "{{ ai_multifs_results_dir }}/{{ fs_config.name }}"

- name: Create AI benchmark data directory on current filesystem
  file:
    path: "{{ current_fs_benchmark_dir }}"
    state: directory
    mode: '0755'

- name: Generate AI benchmark configuration for current filesystem
  template:
    src: milvus_config.json.j2
    dest: "{{ current_fs_results_dir }}/milvus_config.json"
    mode: '0644'

- name: Run AI benchmark on current filesystem
  shell: |
    cd {{ current_fs_benchmark_dir }}
    python3 {{ playbook_dir }}/roles/ai_run_benchmarks/files/milvus_benchmark.py \
      --config {{ current_fs_results_dir }}/milvus_config.json \
      --output {{ current_fs_results_dir }}/results_{{ fs_config.name }}_$(date +%Y%m%d_%H%M%S).json
  register: benchmark_result
  async: 7200  # 2 hour timeout
  poll: 30

- name: Display benchmark completion
  debug:
    msg: "Benchmark completed for {{ fs_config.name }}: {{ benchmark_result.stdout_lines[-5:] | default(['No output']) }}"

- name: Record filesystem configuration metadata
  copy:
    content: |
      # Filesystem Configuration: {{ fs_config.name }}
      Filesystem Type: {{ fs_config.filesystem }}
      mkfs Command: {{ fs_config.mkfs_cmd }}
      Mount Options: {{ fs_config.mount_opts }}
      Device: {{ ai_multifs_device }}
      Mount Point: {{ ai_multifs_mount_point }}
      Data Directory: {{ current_fs_benchmark_dir }}
      Results Directory: {{ current_fs_results_dir }}
      Test Start Time: {{ ansible_date_time.iso8601 }}

      mkfs Output:
      {{ mkfs_result.stdout }}
      {{ mkfs_result.stderr }}
    dest: "{{ current_fs_results_dir }}/filesystem_config.txt"
    mode: '0644'

- name: Capture filesystem statistics after benchmark
  shell: |
    echo "=== Filesystem Usage ===" > {{ current_fs_results_dir }}/filesystem_stats.txt
    df -h {{ ai_multifs_mount_point }} >> {{ current_fs_results_dir }}/filesystem_stats.txt
    echo "" >> {{ current_fs_results_dir }}/filesystem_stats.txt
    echo "=== Filesystem Info ===" >> {{ current_fs_results_dir }}/filesystem_stats.txt
    {% if fs_config.filesystem == 'xfs' %}
    xfs_info {{ ai_multifs_mount_point }} >> {{ current_fs_results_dir }}/filesystem_stats.txt 2>&1 || true
    {% elif fs_config.filesystem == 'ext4' %}
    tune2fs -l {{ ai_multifs_device }} >> {{ current_fs_results_dir }}/filesystem_stats.txt 2>&1 || true
    {% elif fs_config.filesystem == 'btrfs' %}
    btrfs filesystem show {{ ai_multifs_mount_point }} >> {{ current_fs_results_dir }}/filesystem_stats.txt 2>&1 || true
    btrfs filesystem usage {{ ai_multifs_mount_point }} >> {{ current_fs_results_dir }}/filesystem_stats.txt 2>&1 || true
    {% endif %}
  ignore_errors: yes

- name: Unmount filesystem after benchmark
  mount:
    path: "{{ ai_multifs_mount_point }}"
    state: unmounted
