---
- name: Import optional extra_args file
  ansible.builtin.include_vars: "{{ item }}"
  ignore_errors: true
  with_first_found:
    - files:
        - "../extra_vars.yml"
        - "../extra_vars.yaml"
        - "../extra_vars.json"
      skip: true
  tags: vars

- name: Install dependencies for the linux-mirror role
  ansible.builtin.include_tasks: install-deps/fedora/main.yml
  when:
    - ansible_distribution == 'Fedora'
  tags: ["mirror"]

- name: Fail if linux_mirror_nfs is enabled but user is not root
  ansible.builtin.fail:
    msg: "NFS server setup is enabled, but you are not running as root. Please run as root to set up NFS."
  when:
    - not install_only_git_daemon|bool
    - linux_mirror_nfs | bool
    - ansible_user_id != 'root'
  tags: ["nfs", "mirror"]

- name: Set up the mirrors.yaml based on preferences configured
  tags: ["mirror"]
  ansible.builtin.template:
    src: "mirrors.yaml.j2"
    dest: "{{ topdir_path }}/playbooks/roles/linux-mirror/linux-mirror-systemd/mirrors.yaml"
    force: true
    trim_blocks: true
    lstrip_blocks: true
  when:
    - install_linux_mirror|bool
    - not install_only_git_daemon|bool

- name: Create empty directory for systemd service if it does not exist
  tags: ["mirror"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.file:
    path: "{{ local_systemd_path }}"
    state: directory
    mode: "0755"
    owner: root
    group: root
  when:
    - install_linux_mirror|bool

- name: Set up the git daemon systemd service and socket files
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ local_systemd_path }}/{{ item }}"
    force: true
    trim_blocks: true
    lstrip_blocks: true
  with_items:
    - "git-daemon@.service"
    - "git-daemon.socket"
  when:
    - install_linux_mirror|bool
  tags: ["mirror"]

- name: Start mirroring
  delegate_to: localhost
  run_once: true
  ansible.builtin.shell: |
    set -o pipefail
    {{ role_path }}/python/start-mirroring.py --verbose
  args:
    executable: /bin/bash
    chdir: "{{ topdir_path }}"
  when:
    - install_linux_mirror|bool
    - not install_only_git_daemon|bool
  tags: ["mirror"]

- name: Generate systemd service and timer unit files
  delegate_to: localhost
  run_once: true
  ansible.builtin.shell: |
    set -o pipefail
    {{ role_path }}/python/gen-mirror-files.py --refresh 360m --refresh-on-boot 10m
  args:
    executable: /bin/bash
    chdir: "{{ topdir_path }}"
  when:
    - install_linux_mirror|bool
    - not install_only_git_daemon|bool
  tags: ["mirror"]

- name: Load variables from yaml file
  ansible.builtin.include_vars:
    file: "{{ topdir_path }}/playbooks/roles/linux-mirror/linux-mirror-systemd/mirrors.yaml"
    name: mirrors
  tags: ["mirror", "status-check"]
  when:
    - not install_only_git_daemon|bool

- name: Set scope based on user (root uses system scope)
  ansible.builtin.set_fact:
    systemd_scope: "{{ 'system' if ansible_user_id == 'root' else 'user' }}"
    systemd_dir: "{{ '/etc/systemd/system/' if ansible_user_id == 'root' else mirror_user_system_dir }}"
  tags: ["mirror"]
  when:
    - not install_only_git_daemon|bool

- name: Copy systemd service file to user/system systemd dir
  ansible.builtin.copy:
    src: "{{ topdir_path }}/playbooks/roles/linux-mirror/linux-mirror-systemd/{{ item.short_name | regex_replace('/', '-') }}-mirror.service"
    dest: "{{ systemd_dir }}/"
  with_items:
    - "{{ mirrors.get('mirrors') }}"
  loop_control:
    label: "Installing {{ item.short_name }}-mirror.service unit ..."
  tags: ["mirror"]
  when:
    - not install_only_git_daemon|bool

- name: Copy systemd timer file to user/system systemd dir
  ansible.builtin.copy:
    src: "{{ topdir_path }}/playbooks/roles/linux-mirror/linux-mirror-systemd/{{ item.short_name | regex_replace('/', '-') }}-mirror.timer"
    dest: "{{ systemd_dir }}/"
  with_items:
    - "{{ mirrors.get('mirrors') }}"
  loop_control:
    label: "Installing {{ item.short_name }}-mirror.timer unit ..."
  tags: ["mirror"]
  when:
    - not install_only_git_daemon|bool

- name: Enable systemd unit for mirror services
  ansible.builtin.systemd_service:
    name: "{{ item.short_name | regex_replace('/', '-') }}-mirror.service"
    state: started
    enabled: true
    scope: "{{ systemd_scope }}"
  with_items:
    - "{{ mirrors.get('mirrors') }}"
  loop_control:
    label: "Enabling {{ item.short_name }}-mirror.service unit ..."
  tags: ["mirror"]
  when:
    - not install_only_git_daemon|bool

- name: Enable systemd unit for mirror timers
  ansible.builtin.systemd_service:
    name: "{{ item.short_name | regex_replace('/', '-') }}-mirror.timer"
    state: started
    enabled: true
    scope: "{{ systemd_scope }}"
  with_items:
    - "{{ mirrors.get('mirrors') }}"
  loop_control:
    label: "Enabling {{ item.short_name }}-mirror.timer unit ..."
  tags: ["mirror"]
  when:
    - not install_only_git_daemon|bool

- name: Check systemd unit status for mirror services
  ansible.builtin.systemd_service:
    name: "{{ item.short_name | regex_replace('/', '-') }}-mirror.service"
    scope: user
  register: mirror_service_status
  with_items:
    - "{{ mirrors.get('mirrors') }}"
  loop_control:
    label: "Checking service status for {{ item.short_name | regex_replace('/', '-') }}-mirror.service unit ..."
  tags: ["status-check"]
  when:
    - not install_only_git_daemon|bool

- name: Service status
  ansible.builtin.debug:
    var: "{{ item }}.status.ActiveState"
  with_items:
    - "{{ mirror_service_status.item }}"
  tags: ["status-check"]
  when:
    - not install_only_git_daemon|bool

- name: Check systemd unit status for mirror timers
  ansible.builtin.systemd_service:
    name: "{{ item.short_name | regex_replace('/', '-') }}-mirror.timer"
    scope: user
  register: mirror_timer_status
  with_items:
    - "{{ mirrors.get('mirrors') }}"
  loop_control:
    label: "Checking service status for {{ item.short_name | regex_replace('/', '-') }}--mirror.timer ..."
  tags: ["status-check"]
  when:
    - not install_only_git_daemon|bool

- name: Service timer status
  ansible.builtin.debug:
    var: "{{ item }}.status.ActiveState"
  with_items:
    - "{{ mirror_timer_status.item }}"
  tags: ["status-check"]
  when:
    - not install_only_git_daemon|bool

- name: Enable git service systemd socket activation
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.systemd_service:
    name: "git-daemon.socket"
    state: started
    enabled: true
  tags: ["mirror"]

- name: Install NFS server packages (for root user and if NFS is enabled)
  become: true
  ansible.builtin.package:
    name:
      - rpcbind
    state: present
  when:
    - not install_only_git_daemon|bool
    - ansible_user_id == 'root'
    - linux_mirror_nfs | bool
  tags: ["nfs", "mirror"]

- name: Ensure rpcbind and NFS services are started and enabled (for root user and if NFS is enabled)
  become: true
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
    enabled: true
  loop:
    - rpcbind
    - nfs-server
  when:
    - ansible_user_id == 'root'
    - not install_only_git_daemon|bool
    - linux_mirror_nfs | bool
  tags: ["nfs", "mirror"]

- name: Create the /mirror/ directory if it doesn't exist (for root user and if NFS is enabled)
  become: true
  ansible.builtin.file:
    path: /mirror/
    state: directory
    owner: root
    group: root
    mode: "0755"
  when:
    - ansible_user_id == 'root'
    - linux_mirror_nfs | bool
    - not install_only_git_daemon|bool
  tags: ["nfs", "mirror"]


- name: Check if /mirror is already exported
  become: true
  ansible.builtin.command:
    cmd: exportfs
  register: exportfs_output
  changed_when: false
  when:
    - ansible_user_id == 'root'
    - linux_mirror_nfs | bool
    - not install_only_git_daemon|bool
  tags: ["nfs", "mirror"]

- name: Add /mirror to /etc/exports if not already exported
  become: true
  ansible.builtin.lineinfile:
    path: /etc/exports
    line: "/mirror/ *(ro,sync,no_root_squash,no_subtree_check)"
    state: present
    create: true
  when:
    - not install_only_git_daemon|bool
    - ansible_user_id == 'root'
    - linux_mirror_nfs | bool
    - "'/mirror' not in exportfs_output.stdout"
  tags: ["nfs", "mirror"]

- name: Export the /mirror/ directory (for root user and if NFS is enabled)
  become: true
  ansible.builtin.command:
    cmd: exportfs -ra
  when:
    - not install_only_git_daemon|bool
    - ansible_user_id == 'root'
    - linux_mirror_nfs | bool
  tags: ["nfs", "mirror"]

- name: Check if firewalld is running
  become: true
  ansible.builtin.command:
    cmd: systemctl is-active firewalld
  register: firewalld_status
  ignore_errors: true
  changed_when: false
  failed_when: firewalld_status.rc not in [0, 3, 4] # rc=0 (active), rc=3 (inactive but not an error), 4 not present
  when:
    - not install_only_git_daemon|bool
    - linux_mirror_nfs | bool
    - ansible_user_id == 'root'
  tags: ["nfs", "mirror"]

- name: Ensure NFS firewall rules are set (for root user and if NFS is enabled)
  become: true
  ansible.posix.firewalld:
    service: "{{ item }}"
    permanent: true
    state: enabled
    immediate: true
  loop:
    - nfs
    - mountd
    - rpc-bind
  when:
    - not install_only_git_daemon|bool
    - ansible_user_id == 'root'
    - linux_mirror_nfs | bool
    - firewalld_status.stdout == 'active'
  tags: ["nfs", "mirror"]
