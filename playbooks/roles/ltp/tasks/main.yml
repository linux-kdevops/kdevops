---
- name: Import optional extra_args file
  ansible.builtin.include_vars:
    file: "{{ item }}"
  with_first_found:
    - files:
        - "../extra_vars.yml"
        - "../extra_vars.yaml"
        - "../extra_vars.json"
      skip: true
  failed_when: false
  tags: vars

- name: Set up the /data mount point
  tags: ["data_partition"]
  ansible.builtin.include_role:
    name: create_data_partition

- name: Set the pathname of the results directory on the control node
  tags: ["vars"]
  ansible.builtin.set_fact:
    ltp_test_group: "{{ ansible_host | regex_replace(kdevops_host_prefix + '-') | regex_replace('-dev') }}"
    ltp_results_full_path: "{{ topdir_path }}/workflows/ltp/results"
    ltp_results_target: "../workflows/ltp/results/last-run"

- name: Create the local results directory
  tags: ["first_run"]
  ansible.builtin.file:
    path: "{{ ltp_results_full_path }}"
    state: directory
    mode: "u=rwx,g=rx,o=rx"
  delegate_to: localhost
  run_once: true

- name: Clean up our localhost results/last-run directory
  ansible.builtin.file:
    path: "{{ ltp_results_target }}/"
    state: absent
  delegate_to: localhost
  run_once: true
  tags: ["run_tests", "copy_results", "clean_local_results"]

- name: Create empty last-run directory
  ansible.builtin.file:
    path: "{{ ltp_results_target }}/"
    state: directory
  delegate_to: localhost
  run_once: true
  tags: ["run_tests", "copy_results", "clean_local_results"]

- name: Get used target kernel version
  tags: ["copy_results"]
  ansible.builtin.command: "uname -r"
  register: uname_cmd

- name: Store last kernel variable
  tags: ["copy_results"]
  ansible.builtin.set_fact:
    last_kernel: "{{ uname_cmd.stdout_lines | regex_replace('\\]') | regex_replace('\\[') | replace(\"'\", '') }}"
  run_once: true

- name: Document used target kernel version
  ansible.builtin.shell: echo {{ last_kernel }} > {{ ltp_results_target }}/../last-kernel.txt
  delegate_to: localhost
  tags: ["run_tests", "copy_results", "print_results"]
  run_once: true

- name: Ensure the local results directory exists
  tags: copy_results
  ansible.builtin.file:
    path: "{{ ltp_results_full_path }}/last-run/{{ last_kernel }}/{{ ltp_test_group }}"
    state: directory
    mode: "u=rwx,g=rx,o=rx"
  delegate_to: localhost

- name: Set OS-specific variables
  ansible.builtin.include_vars: "{{ lookup('ansible.builtin.first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}.yml"
        - default.yml
      paths:
        - "vars"

- name: Enable the CodeReady repo
  ansible.builtin.include_role:
    name: codereadyrepo
  when:
    - ansible_os_family == "RedHat"

- name: Install dependencies for ltp
  tags: ["build", "ltp"]
  become: true
  become_flags: "su - -c"
  become_method: ansible.builtin.sudo
  ansible.builtin.package:
    name: "{{ ltp_packages }}"
    state: present

- name: Set the pathname of the build directory
  tags: ["build", "ltp"]
  ansible.builtin.set_fact:
    ltp_build_dir: "{{ data_path }}/ltp"

- name: Remove existing ltp build directory
  tags: ["build", "ltp"]
  become: true
  become_flags: "su - -c"
  become_method: ansible.builtin.sudo
  ansible.builtin.file:
    path: "{{ ltp_build_dir }}"
    state: absent

- name: Shallow-clone the ltp source code from {{ ltp_repo }}
  tags: ["build", "clone", "git", "ltp"]
  ansible.builtin.git:
    repo: "{{ ltp_repo }}"
    dest: "{{ ltp_build_dir }}"
    version: "{{ ltp_repo_commit }}"
    update: true
    depth: 1
  retries: 3
  delay: 5
  register: result
  until: not result.failed
  when:
    - kdevops_workflows_dedicated_workflow|bool

- name: Clone the full ltp source code tree from {{ ltp_repo }}
  tags: ["build", "clone", "git", "ltp"]
  ansible.builtin.git:
    repo: "{{ ltp_repo }}"
    dest: "{{ ltp_build_dir }}"
    version: "{{ ltp_repo_commit }}"
    update: true
  retries: 3
  delay: 5
  register: result
  until: not result.failed
  when:
    - not kdevops_workflows_dedicated_workflow|bool

- name: Initialize autotools in the build directory
  tags: ["build", "ltp"]
  community.general.make:
    chdir: "{{ ltp_build_dir }}"
    target: autotools

- name: Configure the ltp build environment
  tags: ["build", "ltp"]
  ansible.builtin.command:
    cmd: "./configure"
    chdir: "{{ ltp_build_dir }}"
    creates: include/config.h

- name: Build ltp from source
  tags: ["build", "ltp"]
  community.general.make:
    chdir: "{{ ltp_build_dir }}"
    target: all
    jobs: "{{ ansible_processor_nproc }}"

- name: Set the pathname of the install directory
  tags: ["build", "ltp"]
  ansible.builtin.set_fact:
    ltp_install_dir: "{{ data_path }}/opt"

- name: Remove existing ltp install directory
  tags: ["build", "ltp"]
  become: true
  become_flags: "su - -c"
  become_method: ansible.builtin.sudo
  ansible.builtin.file:
    path: "{{ ltp_install_dir }}"
    state: absent

- name: Create a fresh ltp install directory
  tags: ["build", "ltp"]
  become: true
  become_flags: "su - -c"
  become_method: ansible.builtin.sudo
  ansible.builtin.file:
    path: "{{ ltp_install_dir }}"
    owner: "root"
    group: "root"
    mode: "u=rwx,g=rwx,o=rwxt"
    state: directory

- name: Remove /opt
  tags: ["build", "ltp"]
  become: true
  become_flags: "su - -c"
  become_method: ansible.builtin.sudo
  ansible.builtin.file:
    path: "/opt"
    state: absent

- name: Replace /opt with a symlink
  tags: ["build", "ltp"]
  become: true
  become_flags: "su - -c"
  become_method: ansible.builtin.sudo
  ansible.builtin.file:
    src: "{{ ltp_install_dir }}"
    dest: "/opt"
    owner: "root"
    group: "root"
    state: link

- name: Install ltp on the test systems
  tags: ["ltp"]
  community.general.make:
    chdir: "{{ ltp_build_dir }}"
    target: install
    jobs: "{{ ansible_processor_nproc }}"

- name: Start the rpcbind service
  tags: ["ltp"]
  become: true
  become_flags: "su - -c"
  become_method: ansible.builtin.sudo
  ansible.builtin.systemd_service:
    name: rpcbind.service
    state: started
    enabled: true

- name: Generate /etc/nfs.conf
  tags: ["ltp"]
  become: true
  become_flags: "su - -c"
  become_method: ansible.builtin.sudo
  ansible.builtin.template:
    src: nfs.conf.j2
    dest: /etc/nfs.conf
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"

- name: Start the NFSD service
  tags: ["ltp"]
  become: true
  become_flags: "su - -c"
  become_method: ansible.builtin.sudo
  ansible.builtin.systemd_service:
    name: nfs-server.service
    state: reloaded
    enabled: true

# NFS mount support for running LTP tests on NFS
- name: Set NFS server address
  tags: ["ltp", "run_tests"]
  ansible.builtin.set_fact:
    nfs_server_host: "{{ kdevops_host_prefix }}-nfs"
  when:
    - ltp_run_tests_on_nfs|default(false)|bool

- name: Create NFS mount point for LTP tests
  tags: ["ltp", "run_tests"]
  become: true
  become_flags: "su - -c"
  become_method: ansible.builtin.sudo
  ansible.builtin.file:
    path: "/mnt/nfs-ltp"
    state: directory
    mode: "0755"
  when:
    - ltp_run_tests_on_nfs|default(false)|bool

- name: Mount NFS export for LTP testing
  tags: ["ltp", "run_tests"]
  become: true
  become_flags: "su - -c"
  become_method: ansible.builtin.sudo
  ansible.builtin.mount:
    path: "/mnt/nfs-ltp"
    src: "{{ nfs_server_host }}:{{ nfsd_export_path }}/0"
    fstype: "nfs"
    opts: "vers=4.2"
    state: mounted
  when:
    - ltp_run_tests_on_nfs|default(false)|bool

- name: Create LTP test directory on NFS mount
  tags: ["ltp", "run_tests"]
  become: true
  become_flags: "su - -c"
  become_method: ansible.builtin.sudo
  ansible.builtin.file:
    path: "/mnt/nfs-ltp/ltp-test"
    state: directory
    mode: "0777"
  when:
    - ltp_run_tests_on_nfs|default(false)|bool

- name: Change to NFS mount directory for LTP tests
  tags: ["run_tests"]
  become: true
  become_flags: "su - -c"
  become_method: ansible.builtin.sudo
  ansible.builtin.shell: |
    cd /mnt/nfs-ltp/ltp-test
    pwd
  when:
    - ltp_run_tests_on_nfs|default(false)|bool

- name: Run ltp on local filesystem
  tags: ["run_tests"]
  become: true
  become_flags: "su - -c"
  become_method: ansible.builtin.sudo
  environment:
    CREATE_ENTRIES: 1
  ansible.builtin.command:
    cmd: "/opt/ltp/runltp {{ ltp_runltp_arg_dict[ltp_test_group] }}"
  changed_when: true
  failed_when: false
  when:
    - not ltp_run_tests_on_nfs|default(false)|bool

- name: Run ltp on NFS mount
  tags: ["run_tests"]
  become: true
  become_flags: "su - -c"
  become_method: ansible.builtin.sudo
  environment:
    CREATE_ENTRIES: 1
    TMPDIR: "/mnt/nfs-ltp/ltp-test"
  ansible.builtin.command:
    cmd: "/opt/ltp/runltp -d /mnt/nfs-ltp/ltp-test {{ ltp_runltp_arg_dict[ltp_test_group] }}"
    chdir: "/mnt/nfs-ltp/ltp-test"
  changed_when: true
  failed_when: false
  when:
    - ltp_run_tests_on_nfs|default(false)|bool

- name: Look for test results in target node's /opt/ltp/results
  tags: ["copy_results"]
  become: true
  become_flags: "su - -c"
  become_method: ansible.builtin.sudo
  ansible.builtin.find:
    paths: "/opt/ltp/results/"
  register: results_files

- name: Copy test results to the control node
  tags: ["copy_results"]
  ansible.builtin.fetch:
    src: "{{ item.path }}"
    dest: "{{ ltp_results_full_path }}/last-run/{{ last_kernel }}/{{ ltp_test_group }}/"
    flat: true
    validate_checksum: false
  with_items: "{{ results_files.files }}"
  when:
    - results_files.matched > 0
  loop_control:
    label: "Copying {{ item.path | basename }} ..."

- name: Look for test output in target node's /opt/ltp/output
  tags: ["copy_results"]
  become: true
  become_flags: "su - -c"
  become_method: ansible.builtin.sudo
  ansible.builtin.find:
    paths: "/opt/ltp/output/"
  register: output_files

- name: Copy test output to the control node
  tags: ["copy_results"]
  ansible.builtin.fetch:
    src: "{{ item.path }}"
    dest: "{{ ltp_results_full_path }}/last-run/{{ last_kernel }}/{{ ltp_test_group }}/"
    flat: true
    validate_checksum: false
  with_items: "{{ output_files.files }}"
  when:
    - output_files.matched > 0
  loop_control:
    label: "Copying {{ item.path | basename }} ..."

- name: Verify last-run kernel directory exists
  tags: ["copy_results"]
  delegate_to: localhost
  ansible.builtin.stat:
    path: "{{ ltp_results_full_path }}/last-run/{{ last_kernel }}"
  register: last_run_kernel_dir

- name: Copy over the last-run into the results directory for archiving into kdevops
  ansible.builtin.copy:
    src: "{{ ltp_results_full_path }}/last-run/{{ last_kernel }}"
    dest: "{{ ltp_results_full_path }}/"
  run_once: true
  tags: ["copy_results"]
  delegate_to: localhost
  when:
    - last_run_kernel_dir.stat.exists
