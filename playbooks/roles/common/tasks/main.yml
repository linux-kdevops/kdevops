---
- name: Import optional extra_args file
  ansible.builtin.include_vars: "{{ item }}"
  ignore_errors: true
  with_first_found:
    - files:
        - "../extra_vars.yml"
        - "../extra_vars.yaml"
        - "../extra_vars.json"
      skip: true
  tags: vars

# Distro agnostic stuff goes below

- name: Git reset kdevops
  environment:
    GIT_SSL_NO_VERIFY: true
  ansible.builtin.git:
    repo: "{{ kdevops_git }}"
    dest: "{{ kdevops_data }}"
  retries: 3
  delay: 5
  register: result
  until: not result.failed
  tags: ["kdevops_reset"]
  when:
    - kdevops_git_reset|bool

- name: Get username we are using
  ansible.builtin.command:
    cmd: whoami
  register: username_on_target
  when:
    - infer_uid_and_group|bool

- name: Set target user as a fact
  ansible.builtin.set_fact:
    target_user: "{{ username_on_target.stdout }}"
  when:
    - infer_uid_and_group|bool

- name: Run getent against the inferred target user
  ansible.builtin.getent:
    database: passwd
    key: "{{ target_user }}"
  register: getent_running_user
  when:
    - infer_uid_and_group|bool

- name: Run getent against the inferred target group
  ansible.builtin.getent:
    database: group
    key: "{{ target_user }}"
  register: getent_on_group
  when:
    - infer_uid_and_group|bool

- name: Get primary group ID from user entry
  set_fact:
    user_primary_gid: "{{ getent_running_user.ansible_facts.getent_passwd[target_user][2] }}"
  when:
    - infer_uid_and_group|bool
    - getent_on_group.rc | default(1) != 0

- name: Run getent against the primary group ID
  getent:
    database: group
    key: "{{ user_primary_gid }}"
  register: getent_primary_group
  when:
    - infer_uid_and_group|bool
    - getent_on_group.rc | default(1) != 0

- name: Override user and group with inferred settings if feature is enabled (group found by name)
  set_fact:
    data_user: "{{ target_user }}"
    data_group: "{{ ((getent_on_group.values() | first).values() | first).keys() | first }}"
  when:
    - infer_uid_and_group|bool
    - getent_on_group.rc | default(1) == 0

- name: Override user and group with inferred settings if feature is enabled (group found by GID)
  set_fact:
    data_user: "{{ target_user }}"
    data_group: "{{ getent_primary_group.ansible_facts.getent_group.keys() | first }}"
  when:
    - infer_uid_and_group|bool
    - getent_on_group.rc | default(1) != 0
