---
- name: Import optional extra_args file
  ansible.builtin.include_vars: "{{ item }}"
  ignore_errors: true
  with_first_found:
    - files:
        - "../extra_vars.yml"
        - "../extra_vars.yaml"
        - "../extra_vars.json"
      skip: true
  tags: vars

- ansible.builtin.include_role:
    name: create_data_partition
  tags: ["data_partition"]

# Distro specific
- ansible.builtin.include_tasks: install-deps/main.yml
- name: Git clone kdevops
  environment:
    GIT_SSL_NO_VERIFY: true
  ansible.builtin.git:
    repo: "{{ kdevops_git }}"
    dest: "{{ kdevops_data }}"
    update: true
    version: main
  tags: ["install", "git"]

- name: Copy over our .config
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/../.config"
    dest: "{{ kdevops_dir }}"
  tags: ["install", "root", "config"]

# We do this *after* the /data/ partition is set up so
# we can house the dbench source code there and so that
# we don't have to bother with the setup of that partition
# in the dbench role.
- name: Compile dbench from source if needed by the distribution
  ansible.builtin.include_role:
    name: compile_dbench
  vars:
    dbench_data: "{{ data_path }}/dbench"
    dbench_git: "{{ blktests_dbench_git }}"
  tags: ["oscheck", "git", "dbench"]

- name: Remove any old blktrace as we always clone a fresh tree
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.file:
    path: "{{ blktrace_data }}"
    state: absent
  tags: ["git", "blktests", "blktrace"]

- name: Git clone blktrace
  ansible.builtin.git:
    repo: "{{ blktrace_git }}"
    dest: "{{ blktrace_data }}"
    update: true
    version: master
  tags: ["git", "blktests", "blktrace"]

- name: Get nproc
  ansible.builtin.command: "{{ num_jobs }}"
  tags: ["blktests", "build", "bltkrace"]
  register: nproc

- name: Build blktrace
  tags: ["blktests", "build", "bltkrace"]
  community.general.make:
    chdir: "{{ blktrace_data }}"
    jobs: "{{ nproc.stdout }}"

- name: Install blktrace
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.command: "{{  make }} install"
  tags: ["blktests", "install", "root", "blktrace"]
  args:
    chdir: "{{ blktrace_data }}"

- name: Remove any old blktets as we always clone a fresh tree
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.file:
    path: "{{ blktests_data }}"
    state: absent
  tags: ["git", "blktests"]

- name: Git clone blktests
  ansible.builtin.git:
    repo: "{{ blktests_git }}"
    dest: "{{ blktests_data }}"
    update: true
    version: master
  tags: ["git", "blktests"]

- name: Build blktests
  tags: ["blktests", "build"]
  community.general.make:
    chdir: "{{ blktests_data }}"
    jobs: "{{ nproc.stdout }}"

- name: Install blktests
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.command: "{{  make }} install"
  tags: ["blktests", "install", "root"]
  args:
    chdir: "{{ blktests_data }}"

- name: Git pull latest kdevops to ensure expunge list is up to date
  environment:
    GIT_SSL_NO_VERIFY: true
  ansible.builtin.git:
    repo: "{{ kdevops_git }}"
    dest: "{{ kdevops_data }}"
    update: true
    version: main
  tags: ["install", "git", "git_update", "run_tests"]

- name: Create a symbolic links needed
  become: true
  become_method: sudo
  ansible.builtin.file:
    src: "{{ kdevops_dir }}/workflows/blktests/scripts/{{ item }}"
    dest: "{{ blktests_data_target }}/{{ item }}"
    state: link
  with_items:
    - "oscheck.sh"
  loop_control:
    label: "{{ item }}"
  tags: ["blktests", "install"]

- name: Disable multipathd service for srp blktests tests
  become: true
  become_method: sudo
  ansible.builtin.systemd:
    name: multipathd
    enabled: false
    state: stopped
  tags: multipathd

- name: Reboot system before our test so we know everything is sane
  tags: ["blktests", "run_tests", "reboot"]
  become: true
  become_method: sudo
  ansible.builtin.reboot:
    post_reboot_delay: 10

- name: Set the path to blktests workflow
  ansible.builtin.set_fact:
    blktests_workflow_target: "../workflows/blktests/"
  tags: ["blktests", "run_tests", "copy_results", "prior_run", "print_results", "augment_expunge_list"]

- name: Set the path where we collect our blktests results
  ansible.builtin.set_fact:
    blktests_results_target: "../workflows/blktests/results/"
    blktests_results_full_path: "{{ topdir_path }}/workflows/blktests/results/"
  tags: ["blktests", "run_tests", "copy_results", "prior_run", "print_results", "augment_expunge_list"]

- name: Set the path where we collect blktests expunges
  ansible.builtin.set_fact:
    blktests_expunges_target: "../workflows/blktests/expunges/"
  tags: ["blktests", "run_tests", "copy_results", "prior_run", "print_results", "augment_expunge_list"]

- name: Print uname for each host
  tags: ["blktests", "run_tests"]
  ansible.builtin.debug:
    var: ansible_kernel
- name: Get used target kernel version
  tags: ["blktests", "copy_results", "augment_expunge_list"]
  ansible.builtin.command: "uname -r"
  register: uname_cmd

- name: Store last kernel variable
  ansible.builtin.set_fact:
    last_kernel: "{{ uname_cmd.stdout_lines | regex_replace('\\]') | regex_replace('\\[') | replace(\"'\", '') }}"
  tags: ["blktests", "copy_results", "augment_expunge_list"]
  run_once: true

- name: Create {{ blktests_results_target }} if it does not exist
  tags: ["blktests", "copy_results", "augment_expunge_list"]
  delegate_to: localhost
  ansible.builtin.file:
    path: "{{ blktests_results_target }}"
    state: directory
  run_once: true

- name: Document used target kernel version
  ansible.builtin.shell: echo {{ last_kernel }} > {{ blktests_results_target }}/last-kernel.txt
  delegate_to: localhost
  tags: ["blktests", "copy_results", "augment_expunge_list"]
  run_once: true

- name: Load configfs module
  tags: ["blktests", "run_tests", "configfs"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.command: "modprobe configfs"
  when:
    - kdevops_run_blktests|bool

- name: Clear out old results directory on target hosts
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.file:
    state: absent
    path: "{{ blktests_data_target }}/results/"
  tags: ["blktests", "run_tests", "clean_results"]

- name: Verify target test devices are defined
  ansible.builtin.fail:
    msg: "The variable blktests_test_devs must be defined to run"
  when:
    - kdevops_run_blktests|bool
    - blktests_test_devs is not defined
  tags: ["blktests", "run_tests"]

- name: Verify target test device is not /dev/null
  ansible.builtin.fail:
    msg: "The variable blktests_test_devs must not be /dev/null"
  when:
    - blktests_test_devs == "/dev/null"
  tags: ["blktests", "run_tests"]

- name: Verify target test devices exist {{ blktests_test_devs }}
  vars:
    verify_dev_list: "{{ blktests_test_devs | regex_replace(' ', ' -a -e ') }}"
  tags: ["blktests", "run_tests"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.command: "test -e {{ verify_dev_list }}"
  when:
    - kdevops_run_blktests|bool
    - blktests_test_devs|length != 0

- name: Verify target test devices are block devices {{ blktests_test_devs }}
  vars:
    verify_dev_list: "{{ blktests_test_devs | regex_replace(' ', ' -a -b ') }}"
  tags: ["blktests", "run_tests"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.command: "test -b {{ verify_dev_list }}"
  when:
    - kdevops_run_blktests|bool
    - blktests_test_devs is defined
    - blktests_test_devs|length != 0

- name: Hint to watchdog tests are about to kick off
  ansible.builtin.file:
    path: "{{ blktests_workflow_target }}/.begin"
    state: touch
  delegate_to: localhost
  tags: ["blktests", "run_tests"]
  when:
    - kdevops_run_blktests|bool
  run_once: true

# Start monitoring services before running tests
- ansible.builtin.import_tasks: ../../monitoring/tasks/monitor_run.yml
  when:
    - kdevops_run_blktests|bool
    - enable_monitoring|default(false)|bool
  tags: ["blktests", "run_tests", "monitoring", "monitor_run"]

- name: Enable low-level messages on console
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.command: sysctl kernel.printk="8 8 1 7"
- name: Check to see if dynamic test limit scope was set
  ansible.builtin.set_fact:
    dynamic_limit_tests: "{{ lookup('ansible.builtin.env', 'LIMIT_TESTS') }}"
  tags: ["blktests", "run_tests", "limit-tests"]
  when:
    - not run_tests_on_failures|bool
    - kdevops_run_blktests|bool

- name: Allow dynamic test override
  ansible.builtin.set_fact:
    all_limit_tests: "{{ dynamic_limit_tests }}"
  tags: ["blktests", "run_tests", "limit-tests"]
  when:
    - not run_tests_on_failures|bool
    - kdevops_run_blktests|bool
    - dynamic_limit_tests is defined
    - dynamic_limit_tests != None
    - dynamic_limit_tests | length > 0

- name: Empty out test limit if None is set
  ansible.builtin.set_fact:
    all_limit_tests: ""
  tags: ["blktests", "run_tests", "limit-tests"]
  when:
    - not run_tests_on_failures|bool
    - kdevops_run_blktests|bool
    - all_limit_tests is defined
    - all_limit_tests == None

- name: Empty out test no limits have been set
  ansible.builtin.set_fact:
    all_limit_tests: ""
  tags: ["blktests", "run_tests", "limit-tests"]
  when:
    - not run_tests_on_failures|bool
    - kdevops_run_blktests|bool
    - all_limit_tests is undefined

- name: Run oscheck-get-failures.sh to get list of known failed tests
  vars:
    group: "{{ ansible_host | regex_replace('blktests-') | regex_replace(kdevops_host_prefix + '-') | regex_replace('-dev') | regex_replace('-', '_') }}"
  tags: ["blktests", "run_tests"]
  ansible.builtin.command: "{{ kdevops_data }}/workflows/blktests/scripts/oscheck-get-failures.sh --test-group {{ group }}"
  args:
    chdir: "{{ blktests_data_target }}"
  register: failed_tests_limit
  when:
    - run_tests_on_failures|bool
    - kdevops_run_blktests|bool

- name: Inform user no failures are known
  ansible.builtin.fail:
    msg: "No known failures for this run! Go find bugs!"
  tags: ["blktests", "run_tests"]
  when:
    - run_tests_on_failures|bool
    - kdevops_run_blktests|bool
    - failed_tests_limit.stdout | replace('\n', ' ') | length == 0

- name: Set test limit to known failed tests
  ansible.builtin.set_fact:
    all_limit_tests: "{{ failed_tests_limit.stdout | replace('\n', ' ') }}"
  tags: ["blktests", "run_tests"]
  when:
    - run_tests_on_failures|bool
    - kdevops_run_blktests|bool

- name: Print list of test limits for this run
  ansible.builtin.debug:
    msg: "all_limit_tests: {{ all_limit_tests }}"
  tags: ["blktests", "run_tests", "limit-tests"]
  when:
    - kdevops_run_blktests|bool
    - all_limit_tests is defined
    - all_limit_tests != None
    - all_limit_tests | length > 0
  vars:
    ansible_callback_diy_runner_on_ok_msg: "{{ ansible_callback_diy.result.output.msg }}"

- name: Stop blktests if we're debbugging limit_tests
  ansible.builtin.meta: end_play
  tags: ["blktests", "run_tests"]
  when:
    - blktests_skip_run|bool

- name: Run blktests using oscheck.sh
  vars:
    group: "{{ inventory_hostname | regex_replace('blktests-') | regex_replace(kdevops_host_prefix + '-') | regex_replace('-dev') | regex_replace('-', '_') }}"
    ansible_callback_diy_runner_on_ok_msg: |
      $ {{ ansible_callback_diy.task.args._raw_params | default('command') }}
      {{ ansible_callback_diy.result.output.stdout | default('') }}
  tags: ["blktests", "run_tests"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.command: "./oscheck.sh --print-start --print-done --test-group {{ group }} {{ oscheck_extra_args }} {{ all_limit_tests }}"
  ignore_errors: true
  no_log: true
  args:
    chdir: "{{ blktests_data_target }}"
  environment:
    TEST_DEVS: "{{ blktests_test_devs }}"
    LIMIT_TESTS: "{{ all_limit_tests }}"
  when:
    - kdevops_run_blktests|bool

- name: Remove watchdog hint that tests have started
  ansible.builtin.file:
    path: "{{ blktests_workflow_target }}/.begin"
    state: absent
  delegate_to: localhost
  tags: ["blktests", "run_tests"]
  when:
    - kdevops_run_blktests|bool
  run_once: true

# Stop monitoring services and collect data after running tests
- ansible.builtin.import_tasks: ../../monitoring/tasks/monitor_collect.yml
  when:
    - kdevops_run_blktests|bool
    - enable_monitoring|default(false)|bool
  tags: ["blktests", "run_tests", "monitoring", "monitor_collect"]

- name: Clean up our localhost results/last-run directory
  ansible.builtin.file:
    path: "{{ blktests_results_target }}/{{ item }}"
    state: absent
  delegate_to: localhost
  with_items:
    - "last-run"
  loop_control:
    label: "{{ item }}"
  run_once: true
  tags: ["blktests", "copy_results", "clean_local_results"]

- name: Look for results for the last run
  tags: ["blktests", "copy_results"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.find:
    paths: "{{ blktests_data_target }}/results/"
    recurse: true
    patterns: "*"
  register: last_run_results

- name: Copy all test results
  tags: ["blktests", "copy_results"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.fetch:
    src: "{{ item.path }}"
    dest: "{{ blktests_results_target }}/last-run/{{ item.path | regex_replace(blktests_data_target + 'results/' | regex_escape()) | regex_replace('^/', '') }}"
    flat: true
  with_items: "{{ last_run_results.files }}"
  loop_control:
    label: "{{ item.path | regex_replace(blktests_data_target + 'results/' | regex_escape()) | regex_replace('^/', '') }}"
  when:
    - last_run_results.matched > 0

- name: Augment expunge list just run git diff after this to see new failures found
  ansible.builtin.command: ./python/workflows/blktests/augment_expunge_list.py {{ blktests_results_target }}/last-run/ {{ blktests_expunges_target }}
  delegate_to: localhost
  tags: ["blktests", "copy_results", "augment_expunge_list"]
  run_once: true

- name: Copy last-run files to results directory for target kernel and in place only bad and dmesg files
  ansible.builtin.command: ./python/workflows/blktests/gen-results-dir.py
  delegate_to: localhost
  tags: ["blktests", "copy_results", "print_results", "augment_expunge_list"]
  run_once: true
  when:
    - not blktests_results_all

- name: Copy all last-run files to results directory for full results
  ansible.builtin.command: ./python/workflows/blktests/gen-results-dir.py --copy-all
  delegate_to: localhost
  tags: ["blktests", "copy_results", "print_results", "augment_expunge_list"]
  run_once: true
  when:
    - blktests_results_all | bool

- name: Print blktests new expunge files for which are not yet committed
  ansible.builtin.command: ./python/workflows/blktests/get_new_expunge_files.py {{ blktests_expunges_target }}
  delegate_to: localhost
  register: new_expunges
  tags: ["blktests", "copy_results", "print_results", "augment_expunge_list"]
  run_once: true

- name: Inform user if new expunge files have been found
  run_once: true
  tags: ["blktests", "copy_results", "augment_expunge_list"]
  ansible.builtin.debug:
    msg: "New expunge files found: {{ new_expunges.stdout_lines }}"
  when:
    - new_expunges.stdout != 0
  vars:
    ansible_callback_diy_runner_on_ok_msg: "{{ ansible_callback_diy.result.output.msg }}"

- name: Check if results directory is empty
  ansible.builtin.find:
    paths: "{{ blktests_results_full_path }}/{{ last_kernel }}"
    file_type: any
  register: result_dir_check
  delegate_to: localhost
  run_once: true
  tags: ["blktests", "copy_results", "augment_expunge_list"]

- name: Inform user if results directory is empty
  ansible.builtin.debug:
    msg: "Skipping compression: {{ blktests_results_full_path }}/{{ last_kernel }} is empty."
  when: result_dir_check.matched == 0
  run_once: true
  tags: ["blktests", "copy_results", "augment_expunge_list"]
  delegate_to: localhost
  vars:
    ansible_callback_diy_runner_on_ok_msg: "{{ ansible_callback_diy.result.output.msg }}"

# You are encouraged to commit the compressed results of failed tests
# so we keep an archive
- name: Compress results {{ blktests_results_full_path }}{{ last_kernel }}.xz
  community.general.archive:
    path: "{{ blktests_results_full_path }}/{{ last_kernel }}"
    dest: "{{ blktests_results_full_path }}/{{ last_kernel }}.xz"
    format: xz
  when: result_dir_check.matched != 0
  run_once: true
  tags: ["blktests", "copy_results", "augment_expunge_list"]
  delegate_to: localhost
