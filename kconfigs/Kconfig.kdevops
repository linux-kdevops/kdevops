config HAVE_DISTRO_SUSE
	bool
	default n

config HAVE_CUSTOM_DISTRO_HOST_PREFIX
	bool
	default n

config HAVE_DISTRO_PREFERS_CUSTOM_HOST_PREFIX
	bool
	default n

config HAVE_DISTRO_LACKS_SUPPORT_FOR_NVME
	bool
	default n

config HAVE_DISTRO_LACKS_SUPPORT_FOR_VIRTIO_DRIVE
	bool
	default n

config HAVE_DISTRO_REQUIRES_CUSTOM_SSH_KEXALGORITHMS
	bool
	default n

config CUSTOM_DISTRO_HOST_PREFIX
	string
	depends on HAVE_CUSTOM_DISTRO_HOST_PREFIX
	default GUESTFS_DEBIAN_BOX_SHORT if GUESTFS_DEBIAN

config CUSTOM_SSH_KEXALGORITHMS
	string
	depends on HAVE_DISTRO_REQUIRES_CUSTOM_SSH_KEXALGORITHMS

config KDEVOPS_USE_DISTRO_HOSTS_PREFIX
	bool "Use a distribution release code name as prefix for hosts"
	default y if HAVE_DISTRO_PREFERS_CUSTOM_HOST_PREFIX
	default n if !HAVE_DISTRO_PREFERS_CUSTOM_HOST_PREFIX
	help
	  Enable this option to use a short distribution release name for the
	  target hosts. This is useful, if for example, you are using
	  kdevops to run different hosts with different configurations and
	  you want to distinguish each target with its specific release name.
	  The preferred distribution release name is set per distribution and
	  per release.

	  Say yes here if you want to distinguish the relase you are using,
	  and let the distribution selection pick the prefix for you
	  instead of using the generic "kdevops" as the prefix.

config KDEVOPS_HOSTS_PREFIX_SET_BY_CLI
	bool
	default $(shell, scripts/check-cli-set-var.sh KDEVOPS_HOSTS_PREFIX)

config KDEVOPS_HOSTS_PREFIX
	string "The hostname prefix to use for nodes"
	output yaml
	default $(shell, ./scripts/append-makefile-vars.sh $(KDEVOPS_HOSTS_PREFIX)) if KDEVOPS_HOSTS_PREFIX_SET_BY_CLI
	default "kdevops" if !KDEVOPS_USE_DISTRO_HOSTS_PREFIX && !KDEVOPS_HOSTS_PREFIX_SET_BY_CLI
	default CUSTOM_DISTRO_HOST_PREFIX if KDEVOPS_USE_DISTRO_HOSTS_PREFIX && !KDEVOPS_HOSTS_PREFIX_SET_BY_CLI
	help
	  Each node used has an associated hostname. We use a prefix to
	  help distinguish projects / goals for a set of nodes. You can use
	  this to override the hostname prefix used.

# old-yamlconfig-compat
config KDEVOPS_HOST_PREFIX
	string
	output yaml
	default KDEVOPS_HOSTS_PREFIX

config KDEVOPS_CUSTOM_SSH_KEXALGORITHMS
	string "The custom ssh config KexAlgorithms string to use"
	depends on HAVE_DISTRO_REQUIRES_CUSTOM_SSH_KEXALGORITHMS
	default CUSTOM_SSH_KEXALGORITHMS
	  help
	  Some distributions, such as older distributions, may require a custom
	  ssh configuration entry for the KexAlgorithms parameter.

config KDEVOPS_MAKE_VERBOSE
	bool "Enable verbose make output (V=1)"
	default n
	help
	  Enable verbose output for all make operations. This is equivalent
	  to running 'make V=1' and shows all executed commands for debugging.

	  When enabled, you'll see:
	  - All shell commands being executed
	  - Full ansible-playbook command lines
	  - Detailed build output

	  This is useful for debugging build issues and understanding what
	  kdevops is doing behind the scenes. You can still override this
	  setting on the command line with 'make V=0' or 'make V=1'.

	  If unsure, say N.

config KDEVOPS_BASELINE_AND_DEV
	bool "Enable both a baseline and development system per target test"
	default n
	help
	  By default kdevops will only spawn a baseline target node (local
	  virtualization or cloud node) for your Linux kernel testing and
	  development. If you have spare resources though it is useful to
	  spawn two nodes per target test though, one to track the basline
	  and another for development purposes or to help you reproduce issues
	  should an issue be found on the baseline. You can enable the spare
	  node by enabling this option. This allows you to for example
	  to keep baseline testing moving forward as soon as an issue is found,
	  so you can use the spare dev node to try to reproduce the issue.

	  The spare dev nodes can also be useful to for example to enable
	  developers in an ecosystem to login to instances with the target
	  distribution / kernel release as well.

	  If enabled, the host baseline will be created as well as the
	  development host, the development hostname is the same as the baseline
	  host but with an added "-dev" postfix.

	  You are encouraged to leave this option disabled unles you really
	  know you have spare resources for the additional dev nodes and know
	  they are immediatey useful to you.

config KDEVOPS_NPROC_SET_BY_CLI
	bool
	default $(shell, scripts/check-cli-set-var.sh KDEVOPS_NPROC)

config KDEVOPS_NPROC_CUSTOM
	bool "Enable a custom limit for host-side parallel jobs"
	default n
	help
	  When this setting is enabled, specify the maximum number of
	  parallel jobs for tasks that execute on the control host
	  (kdevops node), not inside guest VMs. This controls
	  parallelism for host-side operations such as:
	    - Linux kernel compilation (make -j)
	    - QEMU builds
	    - Package generation (bindeb-pkg, binrpm-pkg)
	    - Any other parallel operations on the control node

	  When this setting is disabled, kdevops uses all available
	  host CPUs, which is optimal for dedicated single-user build
	  machines. The default can be overridden with
	  "KDEVOPS_NPROC=NN" on the "make" command line.

	  For shared CI runners or multi-tenant environments, enable
	  this to limit resource usage and prevent CPU oversubscription.
	  The value should be calculated based on:
	    Total host cores / Expected concurrent kdevops jobs

	  Examples:
	    - 64-core runner, 8 concurrent jobs → KDEVOPS_NPROC=8
	    - 32-core runner, 4 concurrent jobs → KDEVOPS_NPROC=8
	    - Single dedicated machine → leave disabled (use all)

	  Note: This does NOT affect guest VM CPU allocation, which is
	  controlled by CONFIG_GUESTFS_VCPUS and related settings.

	  If unsure, say N.

if KDEVOPS_NPROC_CUSTOM

config KDEVOPS_NPROC
	int "Number of parallel jobs for host-side tasks"
	output yaml
	help
	  Set the maximum number of parallel jobs for tasks that
	  execute on the control host.

	  Can also be set via CLI:
	    make defconfig-blktests KDEVOPS_NPROC=8

endif # KDEVOPS_NPROC_CUSTOM

if !KDEVOPS_NPROC_CUSTOM

config KDEVOPS_NPROC
	int
	output yaml
	default 0 if !KDEVOPS_NPROC_SET_BY_CLI
	default $(shell, ./scripts/append-makefile-vars-int.sh $(KDEVOPS_NPROC)) if KDEVOPS_NPROC_SET_BY_CLI

endif # !KDEVOPS_NPROC_CUSTOM

config HAVE_DISTRO_SUPPORTS_EXTRA_ADDON
	bool
	default n

config HAVE_DISTRO_PREFERS_EXTRA_ADDON
	bool
	default n

config HAVE_DISTRO_SUPPORTS_REGISTRATION
	bool
	default n

config HAVE_DISTRO_PREFERS_REGISTRATION
	bool
	default n

config HAVE_DISTRO_REG_METHOD_TWOLINE
	bool
	default n

choice
	prompt "Kdevops enterprise distro post-bringup work"
	default KDEVOPS_ENABLE_DISTRO_REGISTRATION if HAVE_DISTRO_PREFERS_REGISTRATION
	default KDEVOPS_ENABLE_DISTRO_EXTRA_ADDONS if HAVE_DISTRO_PREFERS_EXTRA_ADDON
	depends on HAVE_DISTRO_SUPPORTS_REGISTRATION || HAVE_DISTRO_SUPPORTS_EXTRA_ADDON

config KDEVOPS_ENABLE_DISTRO_REGISTRATION
	bool "Enable distribution registration"
	depends on HAVE_DISTRO_SUPPORTS_REGISTRATION
	help
	  Some distributions have a registration system which can be used to
	  update the system or must be used to make a distribution useful.
	  For those distributions this option can be enabled to complete the
	  registration. Registration is handled by the kdevops devconfig ansible
	  role.

config KDEVOPS_ENABLE_DISTRO_EXTRA_ADDONS
	bool "Enable distribution extra addons"
	depends on HAVE_DISTRO_SUPPORTS_EXTRA_ADDON
	help
	  Some distributions have private internal URLs for package repositories
	  as an alternative to registration. This is useful for R&D of some
	  Enterprise Linux distributions.

endchoice

if KDEVOPS_ENABLE_DISTRO_REGISTRATION

choice
	prompt "Kdevops distribution registration method"
	default KDEVOPS_DISTRO_REG_METHOD_TWOLINE

config KDEVOPS_DISTRO_REG_METHOD_TWOLINE
	bool "Twoline registration system"
	help
	  The kdevops devconfig ansible role is used for the "twoline"
	  distribution registration method. This method consists of depending
	  on two lines on a playbooks/secret.yml file which we will generate,
	  one line which enables the twoline registration method, and another
	  line which contains the registration code to be used.

endchoice

endif # KDEVOPS_ENABLE_DISTRO_REGISTRATION

if KDEVOPS_DISTRO_REG_METHOD_TWOLINE

menu "Distribution twoline method registration configuration"
source "kconfigs/Kconfig.reg_twoline"
endmenu

endif # KDEVOPS_DISTRO_REG_METHOD_TWOLINE

if KDEVOPS_ENABLE_DISTRO_EXTRA_ADDONS

config KDEVOPS_EXTRA_ADDON_SOURCE
	string
	depends on HAVE_DISTRO_SUSE

endif # KDEVOPS_ENABLE_DISTRO_EXTRA_ADDONS

menu "Ansible post-bring up provisioning configuration"
source "kconfigs/Kconfig.ansible_provisioning"
endmenu


menu "Ansible Configuration"
source "kconfigs/Kconfig.ansible_cfg"
endmenu
