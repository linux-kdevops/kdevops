# SPDX-License-Identifier: copyleft-next-0.3.1

config ENABLE_MONITORING
	bool "Enable monitoring services during workflow execution"
	output yaml
	default n
	help
	  Enable monitoring services to collect statistics during workflow
	  execution. This allows collection of various system metrics while
	  workflows are running.

	  Monitoring services run in the background during test execution and
	  automatically collect results afterward. The collected data can be
	  used for performance analysis, debugging, and understanding system
	  behavior during tests.

	  Individual workflows must add support for monitoring integration.
	  Currently supported workflows:
	  - fstests

if ENABLE_MONITORING

config MONITOR_DEVELOPMENTAL_STATS
	bool "Enable developmental statistics (not yet upstream)"
	output yaml
	default n
	help
	  Enable collection of statistics that are still in development
	  and not yet merged upstream in the Linux kernel.

	  This is useful for testing and validating new kernel features
	  that provide additional debugging or performance metrics.

if MONITOR_DEVELOPMENTAL_STATS

config MONITOR_FOLIO_MIGRATION
	bool "Monitor folio migration statistics"
	output yaml
	default n
	help
	  Enable monitoring of folio migration statistics if available.
	  This requires the kernel to have the folio migration debugfs
	  stats patch applied.

	  The statistics are collected from:
	  /sys/kernel/debug/mm/migrate/stats

	  This feature collects migration statistics periodically during
	  workflow execution and can generate plots for visualization.

config MONITOR_FOLIO_MIGRATION_INTERVAL
	int "Folio migration monitoring interval (seconds)"
	output yaml
	default 60
	depends on MONITOR_FOLIO_MIGRATION
	help
	  How often to collect folio migration statistics in seconds.
	  Default is 60 seconds.

	  Lower values provide more granular data but may impact system
	  performance. Higher values reduce overhead but may miss
	  short-lived migration events.

config MONITOR_MEMORY_FRAGMENTATION
	bool "Monitor memory fragmentation with eBPF"
	output yaml
	default n
	help
	  Enable monitoring of memory fragmentation using eBPF-based tracking.
	  This provides advanced memory fragmentation visualization using
	  eBPF tracepoints and matplotlib.

	  This tool tracks memory allocation events and fragmentation indices
	  in real-time, providing insights that traditional methods like
	  /proc/pagetypeinfo cannot fully capture.

	  Features:
	  - eBPF-based tracepoint tracking
	  - Real-time fragmentation index monitoring
	  - Page mobility tracking
	  - Matplotlib visualization of fragmentation data

	  Requirements:
	  - Python 3 with python3-bpfcc
	  - Kernel with required tracepoint support
	  - Root privileges for eBPF attachment

	  The tool is particularly useful for investigating whether Large Block
	  Size support in the kernel creates worse fragmentation.

config MONITOR_FRAGMENTATION_DURATION
	int "Fragmentation monitoring duration (seconds)"
	output yaml
	default 0
	depends on MONITOR_MEMORY_FRAGMENTATION
	help
	  Duration to run fragmentation monitoring in seconds.
	  Set to 0 for continuous monitoring until workflow completion.

	  The monitoring will automatically stop when the workflow
	  finishes or when this duration expires, whichever comes first.

config MONITOR_FRAGMENTATION_OUTPUT_DIR
	string "Fragmentation monitoring output directory"
	output yaml
	default "/root/monitoring/fragmentation"
	depends on MONITOR_MEMORY_FRAGMENTATION
	help
	  Directory where fragmentation monitoring data and plots will be stored.
	  This directory will be created if it doesn't exist.

	  The collected data includes:
	  - Raw eBPF trace data
	  - Generated matplotlib plots
	  - JSON formatted fragmentation metrics

endif # MONITOR_DEVELOPMENTAL_STATS

# Future monitoring options can be added here
# Examples:
# - Memory pressure monitoring
# - CPU utilization tracking
# - I/O statistics collection
# - Network traffic monitoring
# - Custom perf event monitoring

endif # ENABLE_MONITORING
