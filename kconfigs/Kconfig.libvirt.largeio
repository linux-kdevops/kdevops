if EXTRA_STORAGE_SUPPORTS_LARGEIO

config QEMU_ENABLE_EXTRA_DRIVE_LARGEIO
	bool "Enable QEMU drives for large IO experimentation"
	depends on LIBVIRT
	default n
	help
	  If you want to experiment with large IO either with NVMe or virtio
	  you can enable this option. This will create a few additional drives
	  which are dedicated for largio experimentation testing.

	  For now you will need a distribution with a root filesystem on XFS
	  or btrfs, and so you will want to enable the kdevops distribution and
	  LIBVIRT_KDEVOPS_DEBIAN_TESTING64_XFS_20230427. This is a requirement
	  given all block devices must use iomap and that is the only current
	  way to disable buffer-heads. Eventually this limitation is expected
	  You can also use large-block-20230525 with Amazon Linux 2023 on AWS.

	  If unsure say N.

if QEMU_ENABLE_EXTRA_DRIVE_LARGEIO

config QEMU_EXTRA_DRIVE_LARGEIO_NUM_DRIVES_PER_SPACE
	int "How many qemu drives to create per each target size"
	default 4
	help
	  If you are going to try to mess with LBS on 4k LBA you can experiment
	  with:

	  - 4k block size
	  - 8k block size
	  - 16k block size
	  - 32k block size
	  - 64k block size

	  So in total 4 drives. For a drive with an LBA format of 16k, you can
	  only experiment with block sizes:

	  - 16k block size
	  - 32k block size
	  - 64k block size

	  In theory you can experiment up to MAX_PAGECACHE_ORDER and to make
	  things worse some filesystems can use block sizes which are not power
	  of two. For now filesystems only support up to max block size 64k, so
	  we can just keep the max drive sizes down a bit. Likewise twice the
	  PAGE_SIZE is not supported as we require at least order 2 so 16k as
	  folios use the 3rd page for the deferred list. So you really only need
	  for 4k today:

	  - 4k block size
	  - 16k block size
	  - 32k block size
	  - 64k block size

	  If we create 4 drives per space you can have 4 for basic baseline
	  coverage testing. It seems the max limit is about 20 drives per
	  qemu pcie port today, if you enable more than the default 4, good
	  luck!

config QEMU_EXTRA_DRIVE_LARGEIO_BASE_SIZE
	int "QEMU extra drive drive base size"
	default 10240
	help
	  The base size of the QEMU extra storage drive to expose. The
	  size is increased by 1 MiB as we go down the list of extra large IO
	  drives.

config QEMU_EXTRA_DRIVE_LARGEIO_COMPAT
	bool "Use a compatibility logical block size"
	default n
	help
	  Since older spindle drives used to work with 512 bytes some drives
	  exist with support to handle 512 writes even if they physically store
	  more data on their drives for that one 512 byte write. Enable this if
	  you want to ensure your large IO drives always have a logical block
	  size restrained by the compatibility size you want to support.

	  By default this is not enabled, and therefore the logical block size
	  for the large IO drives will be equal to the physical block size.

config QEMU_EXTRA_DRIVE_LARGEIO_COMPAT_SIZE
	int "Large IO compat size"
	default 512
	help
	  This is the compatibility base block size to use for older drives.
	  Even if you disable QEMU_EXTRA_DRIVE_LARGEIO_COMPAT, this value will
	  be used as the base for the computation for the physical block size
	  for the large IO drives we create for you using the formula:

	    libvirt_largeio_logical_compat_size  * (2 ** n)

	  where n is the index of the large IO drive.

config QEMU_EXTRA_DRIVE_LARGEIO_MAX_POW_LIMIT
	int "Large IO - number of drives - power"
	default 7
	help
	  We use an iterator to create the number of large drives on the
	  guest system using:

	    for n in range(0,libvirt_largeio_pow_limit)
	       pbs = compat_size * (2 ** n)

	  Using a compat_size of 512 means we go up to 64k physical block
	  size by using the default of 7.

	  This provides the value for the libvirt_largeio_pow_limit. By
	  default we set this to 12 so we get drives of different physical
	  sizes in powers of 2 ranging from 512 up to 1 GiB. You can reduce
	  this if you want less drives to experiment with.

endif # QEMU_ENABLE_EXTRA_DRIVE_LARGEIO

config LIBVIRT_ENABLE_LARGEIO
	bool
	default y if QEMU_ENABLE_EXTRA_DRIVE_LARGEIO

config QEMU_LARGEIO_DRIVE_BASE_SIZE
	int
	default 10240 if !QEMU_ENABLE_EXTRA_DRIVE_LARGEIO
	default QEMU_EXTRA_DRIVE_LARGEIO_BASE_SIZE if QEMU_ENABLE_EXTRA_DRIVE_LARGEIO

config QEMU_LARGEIO_COMPAT_SIZE
	int
	default 512 if !QEMU_ENABLE_EXTRA_DRIVE_LARGEIO
	default QEMU_EXTRA_DRIVE_LARGEIO_COMPAT_SIZE if QEMU_ENABLE_EXTRA_DRIVE_LARGEIO

config QEMU_LARGEIO_MAX_POW_LIMIT
	int
	default 12 if !QEMU_ENABLE_EXTRA_DRIVE_LARGEIO
	default QEMU_EXTRA_DRIVE_LARGEIO_MAX_POW_LIMIT if QEMU_ENABLE_EXTRA_DRIVE_LARGEIO

endif # EXTRA_STORAGE_SUPPORTS_LARGEIO
